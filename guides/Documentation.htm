<html>
    <head>
        <title>Hatch Game Engine Documentation</title>
        <style>
            body {
                background-color: white;
                font-family: sans-serif;
                margin: 64px;
            }
            codefrag {
                display: inline;
                margin: 0px;
                font-family: monospace;
            }
            a {
                text-decoration: none;
                color: #4141F2;
            }
            .function_list {
                font-family: monospace;
                margin-top: 0.5em;
            }
            .function_list li {
                margin-top: 0.125em;
                margin-bottom: 0.125em;
            }
            code, pre.code {
                background-color: #f2f2f2;
                border-radius: 3px;
                padding: 3px;
            }
            codeBlock {
                background-color: #f2f2f2;
                border-radius: 3px;
                padding: 3px;
                line-height: 100%;
                word-break: normal;
                font-family: monospace;
            }
        </style>
    </head>
    <body>
        <div style="position: fixed; margin-top: -32px; margin-left: -96px; width: 100%; text-align: right; ">
            <a href="#Reference_top">Back to top</a>
        </div>
        <h1 id="Reference_top">Hatch Game Engine Reference</h1>
        <h3>Function Namespaces</h3>
        <ul>
            <li><a href="#Reference_Array">Array</a></li>
            <li><a href="#Reference_Date">Date</a></li>
            <li><a href="#Reference_Device">Device</a></li>
            <li><a href="#Reference_Directory">Directory</a></li>
            <li><a href="#Reference_Display">Display</a></li>
            <li><a href="#Reference_Draw">Draw</a></li>
            <li><a href="#Reference_Ease">Ease</a></li>
            <li><a href="#Reference_File">File</a></li>
            <li><a href="#Reference_HTTP">HTTP</a></li>
            <li><a href="#Reference_Input">Input</a></li>
            <li><a href="#Reference_Instance">Instance</a></li>
            <li><a href="#Reference_JSON">JSON</a></li>
            <li><a href="#Reference_Math">Math</a></li>
            <li><a href="#Reference_Matrix">Matrix</a></li>
            <li><a href="#Reference_Music">Music</a></li>
            <li><a href="#Reference_Number">Number</a></li>
            <li><a href="#Reference_Palette">Palette</a></li>
            <li><a href="#Reference_Resources">Resources</a></li>
            <li><a href="#Reference_Scene">Scene</a></li>
            <li><a href="#Reference_Shader">Shader</a></li>
            <li><a href="#Reference_SocketClient">SocketClient</a></li>
            <li><a href="#Reference_Sound">Sound</a></li>
            <li><a href="#Reference_Sprite">Sprite</a></li>
            <li><a href="#Reference_String">String</a></li>
            <li><a href="#Reference_Texture">Texture</a></li>
            <li><a href="#Reference_Thread">Thread</a></li>
            <li><a href="#Reference_TileCollision">TileCollision</a></li>
            <li><a href="#Reference_TileInfo">TileInfo</a></li>
            <li><a href="#Reference_Touch">Touch</a></li>
            <li><a href="#Reference_Video">Video</a></li>
            <li><a href="#Reference_View">View</a></li>
            <li><a href="#Reference_Window">Window</a></li>
        </ul>
            <p id="Reference_Array">
                <h2>Array</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Array_Create">Array.Create</a></li>
                    <li><a href="#Reference_Array_Length">Array.Length</a></li>
                    <li><a href="#Reference_Array_Push">Array.Push</a></li>
                    <li><a href="#Reference_Array_Pop">Array.Pop</a></li>
                    <li><a href="#Reference_Array_Insert">Array.Insert</a></li>
                    <li><a href="#Reference_Array_Erase">Array.Erase</a></li>
                    <li><a href="#Reference_Array_Clear">Array.Clear</a></li>
                    <li><a href="#Reference_Array_Shift">Array.Shift</a></li>
                    <li><a href="#Reference_Array_SetAll">Array.SetAll</a></li>
                </ul>
            </p>
            <p id="Reference_Date">
                <h2>Date</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Date_GetEpoch">Date.GetEpoch</a></li>
                    <li><a href="#Reference_Date_GetTicks">Date.GetTicks</a></li>
                </ul>
            </p>
            <p id="Reference_Device">
                <h2>Device</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Device_GetPlatform">Device.GetPlatform</a></li>
                    <li><a href="#Reference_Device_IsMobile">Device.IsMobile</a></li>
                </ul>
            </p>
            <p id="Reference_Directory">
                <h2>Directory</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Directory_Create">Directory.Create</a></li>
                    <li><a href="#Reference_Directory_Exists">Directory.Exists</a></li>
                    <li><a href="#Reference_Directory_GetFiles">Directory.GetFiles</a></li>
                    <li><a href="#Reference_Directory_GetDirectories">Directory.GetDirectories</a></li>
                </ul>
            </p>
            <p id="Reference_Display">
                <h2>Display</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Display_GetWidth">Display.GetWidth</a></li>
                    <li><a href="#Reference_Display_GetHeight">Display.GetHeight</a></li>
                </ul>
            </p>
            <p id="Reference_Draw">
                <h2>Draw</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Draw_Sprite">Draw.Sprite</a></li>
                    <li><a href="#Reference_Draw_SpritePart">Draw.SpritePart</a></li>
                    <li><a href="#Reference_Draw_Image">Draw.Image</a></li>
                    <li><a href="#Reference_Draw_ImagePart">Draw.ImagePart</a></li>
                    <li><a href="#Reference_Draw_ImageSized">Draw.ImageSized</a></li>
                    <li><a href="#Reference_Draw_ImagePartSized">Draw.ImagePartSized</a></li>
                    <li><a href="#Reference_Draw_InitArrayBuffer">Draw.InitArrayBuffer</a></li>
                    <li><a href="#Reference_Draw_SetAmbientLighting">Draw.SetAmbientLighting</a></li>
                    <li><a href="#Reference_Draw_SetDiffuseLighting">Draw.SetDiffuseLighting</a></li>
                    <li><a href="#Reference_Draw_SetSpecularLighting">Draw.SetSpecularLighting</a></li>
                    <li><a href="#Reference_Draw_BindArrayBuffer">Draw.BindArrayBuffer</a></li>
                    <li><a href="#Reference_Draw_Model">Draw.Model</a></li>
                    <li><a href="#Reference_Draw_ModelSimple">Draw.ModelSimple</a></li>
                    <li><a href="#Reference_Draw_RenderArrayBuffer">Draw.RenderArrayBuffer</a></li>
                    <li><a href="#Reference_Draw_Video">Draw.Video</a></li>
                    <li><a href="#Reference_Draw_VideoPart">Draw.VideoPart</a></li>
                    <li><a href="#Reference_Draw_VideoSized">Draw.VideoSized</a></li>
                    <li><a href="#Reference_Draw_VideoPartSized">Draw.VideoPartSized</a></li>
                    <li><a href="#Reference_Draw_Tile">Draw.Tile</a></li>
                    <li><a href="#Reference_Draw_Texture">Draw.Texture</a></li>
                    <li><a href="#Reference_Draw_TextureSized">Draw.TextureSized</a></li>
                    <li><a href="#Reference_Draw_TexturePart">Draw.TexturePart</a></li>
                    <li><a href="#Reference_Draw_SetFont">Draw.SetFont</a></li>
                    <li><a href="#Reference_Draw_SetTextAlign">Draw.SetTextAlign</a></li>
                    <li><a href="#Reference_Draw_SetTextBaseline">Draw.SetTextBaseline</a></li>
                    <li><a href="#Reference_Draw_SetTextAdvance">Draw.SetTextAdvance</a></li>
                    <li><a href="#Reference_Draw_SetTextLineAscent">Draw.SetTextLineAscent</a></li>
                    <li><a href="#Reference_Draw_MeasureText">Draw.MeasureText</a></li>
                    <li><a href="#Reference_Draw_MeasureTextWrapped">Draw.MeasureTextWrapped</a></li>
                    <li><a href="#Reference_Draw_Text">Draw.Text</a></li>
                    <li><a href="#Reference_Draw_TextWrapped">Draw.TextWrapped</a></li>
                    <li><a href="#Reference_Draw_TextEllipsis">Draw.TextEllipsis</a></li>
                    <li><a href="#Reference_Draw_SetBlendColor">Draw.SetBlendColor</a></li>
                    <li><a href="#Reference_Draw_SetTextureBlend">Draw.SetTextureBlend</a></li>
                    <li><a href="#Reference_Draw_SetBlendMode">Draw.SetBlendMode</a></li>
                    <li><a href="#Reference_Draw_SetBlendFactor">Draw.SetBlendFactor</a></li>
                    <li><a href="#Reference_Draw_SetBlendFactorExtended">Draw.SetBlendFactorExtended</a></li>
                    <li><a href="#Reference_Draw_SetCompareColor">Draw.SetCompareColor</a></li>
                    <li><a href="#Reference_Draw_Line">Draw.Line</a></li>
                    <li><a href="#Reference_Draw_Circle">Draw.Circle</a></li>
                    <li><a href="#Reference_Draw_Ellipse">Draw.Ellipse</a></li>
                    <li><a href="#Reference_Draw_Triangle">Draw.Triangle</a></li>
                    <li><a href="#Reference_Draw_TriangleBlend">Draw.TriangleBlend</a></li>
                    <li><a href="#Reference_Draw_QuadBlend">Draw.QuadBlend</a></li>
                    <li><a href="#Reference_Draw_Rectangle">Draw.Rectangle</a></li>
                    <li><a href="#Reference_Draw_CircleStroke">Draw.CircleStroke</a></li>
                    <li><a href="#Reference_Draw_EllipseStroke">Draw.EllipseStroke</a></li>
                    <li><a href="#Reference_Draw_TriangleStroke">Draw.TriangleStroke</a></li>
                    <li><a href="#Reference_Draw_RectangleStroke">Draw.RectangleStroke</a></li>
                    <li><a href="#Reference_Draw_UseFillSmoothing">Draw.UseFillSmoothing</a></li>
                    <li><a href="#Reference_Draw_UseStrokeSmoothing">Draw.UseStrokeSmoothing</a></li>
                    <li><a href="#Reference_Draw_SetClip">Draw.SetClip</a></li>
                    <li><a href="#Reference_Draw_ClearClip">Draw.ClearClip</a></li>
                    <li><a href="#Reference_Draw_Save">Draw.Save</a></li>
                    <li><a href="#Reference_Draw_Scale">Draw.Scale</a></li>
                    <li><a href="#Reference_Draw_Rotate">Draw.Rotate</a></li>
                    <li><a href="#Reference_Draw_Restore">Draw.Restore</a></li>
                    <li><a href="#Reference_Draw_Translate">Draw.Translate</a></li>
                    <li><a href="#Reference_Draw_SetTextureTarget">Draw.SetTextureTarget</a></li>
                    <li><a href="#Reference_Draw_Clear">Draw.Clear</a></li>
                    <li><a href="#Reference_Draw_ResetTextureTarget">Draw.ResetTextureTarget</a></li>
                </ul>
            </p>
            <p id="Reference_Ease">
                <h2>Ease</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Ease_InSine">Ease.InSine</a></li>
                    <li><a href="#Reference_Ease_OutSine">Ease.OutSine</a></li>
                    <li><a href="#Reference_Ease_InOutSine">Ease.InOutSine</a></li>
                    <li><a href="#Reference_Ease_InQuad">Ease.InQuad</a></li>
                    <li><a href="#Reference_Ease_OutQuad">Ease.OutQuad</a></li>
                    <li><a href="#Reference_Ease_InOutQuad">Ease.InOutQuad</a></li>
                    <li><a href="#Reference_Ease_InCubic">Ease.InCubic</a></li>
                    <li><a href="#Reference_Ease_OutCubic">Ease.OutCubic</a></li>
                    <li><a href="#Reference_Ease_InOutCubic">Ease.InOutCubic</a></li>
                    <li><a href="#Reference_Ease_InQuart">Ease.InQuart</a></li>
                    <li><a href="#Reference_Ease_OutQuart">Ease.OutQuart</a></li>
                    <li><a href="#Reference_Ease_InOutQuart">Ease.InOutQuart</a></li>
                    <li><a href="#Reference_Ease_InQuint">Ease.InQuint</a></li>
                    <li><a href="#Reference_Ease_OutQuint">Ease.OutQuint</a></li>
                    <li><a href="#Reference_Ease_InOutQuint">Ease.InOutQuint</a></li>
                    <li><a href="#Reference_Ease_InExpo">Ease.InExpo</a></li>
                    <li><a href="#Reference_Ease_OutExpo">Ease.OutExpo</a></li>
                    <li><a href="#Reference_Ease_InOutExpo">Ease.InOutExpo</a></li>
                    <li><a href="#Reference_Ease_InCirc">Ease.InCirc</a></li>
                    <li><a href="#Reference_Ease_OutCirc">Ease.OutCirc</a></li>
                    <li><a href="#Reference_Ease_InOutCirc">Ease.InOutCirc</a></li>
                    <li><a href="#Reference_Ease_InBack">Ease.InBack</a></li>
                    <li><a href="#Reference_Ease_OutBack">Ease.OutBack</a></li>
                    <li><a href="#Reference_Ease_InOutBack">Ease.InOutBack</a></li>
                    <li><a href="#Reference_Ease_InElastic">Ease.InElastic</a></li>
                    <li><a href="#Reference_Ease_OutElastic">Ease.OutElastic</a></li>
                    <li><a href="#Reference_Ease_InOutElastic">Ease.InOutElastic</a></li>
                    <li><a href="#Reference_Ease_InBounce">Ease.InBounce</a></li>
                    <li><a href="#Reference_Ease_OutBounce">Ease.OutBounce</a></li>
                    <li><a href="#Reference_Ease_InOutBounce">Ease.InOutBounce</a></li>
                    <li><a href="#Reference_Ease_Triangle">Ease.Triangle</a></li>
                </ul>
            </p>
            <p id="Reference_File">
                <h2>File</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_File_Exists">File.Exists</a></li>
                    <li><a href="#Reference_File_ReadAllText">File.ReadAllText</a></li>
                    <li><a href="#Reference_File_WriteAllText">File.WriteAllText</a></li>
                    <li><a href="#Reference_Resources_ReadAllText">Resources.ReadAllText</a></li>
                </ul>
            </p>
            <p id="Reference_HTTP">
                <h2>HTTP</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_HTTP_GetString">HTTP.GetString</a></li>
                    <li><a href="#Reference_HTTP_GetToFile">HTTP.GetToFile</a></li>
                </ul>
            </p>
            <p id="Reference_Input">
                <h2>Input</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Input_GetMouseX">Input.GetMouseX</a></li>
                    <li><a href="#Reference_Input_GetMouseY">Input.GetMouseY</a></li>
                    <li><a href="#Reference_Input_IsMouseButtonDown">Input.IsMouseButtonDown</a></li>
                    <li><a href="#Reference_Input_IsMouseButtonPressed">Input.IsMouseButtonPressed</a></li>
                    <li><a href="#Reference_Input_IsMouseButtonReleased">Input.IsMouseButtonReleased</a></li>
                    <li><a href="#Reference_Input_IsKeyDown">Input.IsKeyDown</a></li>
                    <li><a href="#Reference_Input_IsKeyPressed">Input.IsKeyPressed</a></li>
                    <li><a href="#Reference_Input_IsKeyReleased">Input.IsKeyReleased</a></li>
                    <li><a href="#Reference_Input_GetControllerAttached">Input.GetControllerAttached</a></li>
                    <li><a href="#Reference_Input_GetControllerHat">Input.GetControllerHat</a></li>
                    <li><a href="#Reference_Input_GetControllerAxis">Input.GetControllerAxis</a></li>
                    <li><a href="#Reference_Input_GetControllerButton">Input.GetControllerButton</a></li>
                    <li><a href="#Reference_Input_GetControllerName">Input.GetControllerName</a></li>
                </ul>
            </p>
            <p id="Reference_Instance">
                <h2>Instance</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Instance_Create">Instance.Create</a></li>
                    <li><a href="#Reference_Instance_GetNth">Instance.GetNth</a></li>
                    <li><a href="#Reference_Instance_IsClass">Instance.IsClass</a></li>
                    <li><a href="#Reference_Instance_GetCount">Instance.GetCount</a></li>
                    <li><a href="#Reference_Instance_GetNextInstance">Instance.GetNextInstance</a></li>
                </ul>
            </p>
            <p id="Reference_JSON">
                <h2>JSON</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_JSON_Parse">JSON.Parse</a></li>
                    <li><a href="#Reference_JSON_ToString">JSON.ToString</a></li>
                </ul>
            </p>
            <p id="Reference_Math">
                <h2>Math</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Math_Cos">Math.Cos</a></li>
                    <li><a href="#Reference_Math_Sin">Math.Sin</a></li>
                    <li><a href="#Reference_Math_Tan">Math.Tan</a></li>
                    <li><a href="#Reference_Math_Acos">Math.Acos</a></li>
                    <li><a href="#Reference_Math_Asin">Math.Asin</a></li>
                    <li><a href="#Reference_Math_Atan">Math.Atan</a></li>
                    <li><a href="#Reference_Math_Distance">Math.Distance</a></li>
                    <li><a href="#Reference_Math_Direction">Math.Direction</a></li>
                    <li><a href="#Reference_Math_Abs">Math.Abs</a></li>
                    <li><a href="#Reference_Math_Min">Math.Min</a></li>
                    <li><a href="#Reference_Math_Max">Math.Max</a></li>
                    <li><a href="#Reference_Math_Clamp">Math.Clamp</a></li>
                    <li><a href="#Reference_Math_Sign">Math.Sign</a></li>
                    <li><a href="#Reference_Math_Random">Math.Random</a></li>
                    <li><a href="#Reference_Math_RandomMax">Math.RandomMax</a></li>
                    <li><a href="#Reference_Math_RandomRange">Math.RandomRange</a></li>
                    <li><a href="#Reference_Math_Floor">Math.Floor</a></li>
                    <li><a href="#Reference_Math_Ceil">Math.Ceil</a></li>
                    <li><a href="#Reference_Math_Round">Math.Round</a></li>
                    <li><a href="#Reference_Math_Sqrt">Math.Sqrt</a></li>
                    <li><a href="#Reference_Math_Pow">Math.Pow</a></li>
                    <li><a href="#Reference_Math_Exp">Math.Exp</a></li>
                </ul>
            </p>
            <p id="Reference_Matrix">
                <h2>Matrix</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Matrix_Create">Matrix.Create</a></li>
                    <li><a href="#Reference_Matrix_Identity">Matrix.Identity</a></li>
                    <li><a href="#Reference_Matrix_Copy">Matrix.Copy</a></li>
                    <li><a href="#Reference_Matrix_Multiply">Matrix.Multiply</a></li>
                    <li><a href="#Reference_Matrix_Translate">Matrix.Translate</a></li>
                    <li><a href="#Reference_Matrix_Scale">Matrix.Scale</a></li>
                    <li><a href="#Reference_Matrix_Rotate">Matrix.Rotate</a></li>
                </ul>
            </p>
            <p id="Reference_Music">
                <h2>Music</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Music_Play">Music.Play</a></li>
                    <li><a href="#Reference_Music_Stop">Music.Stop</a></li>
                    <li><a href="#Reference_Music_StopWithFadeOut">Music.StopWithFadeOut</a></li>
                    <li><a href="#Reference_Music_Pause">Music.Pause</a></li>
                    <li><a href="#Reference_Music_Resume">Music.Resume</a></li>
                    <li><a href="#Reference_Music_Clear">Music.Clear</a></li>
                    <li><a href="#Reference_Music_Loop">Music.Loop</a></li>
                    <li><a href="#Reference_Music_IsPlaying">Music.IsPlaying</a></li>
                </ul>
            </p>
            <p id="Reference_Number">
                <h2>Number</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Number_ToString">Number.ToString</a></li>
                    <li><a href="#Reference_Number_AsInteger">Number.AsInteger</a></li>
                    <li><a href="#Reference_Number_AsDecimal">Number.AsDecimal</a></li>
                </ul>
            </p>
            <p id="Reference_Palette">
                <h2>Palette</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Palette_EnablePaletteUsage">Palette.EnablePaletteUsage</a></li>
                    <li><a href="#Reference_Palette_LoadFromFile">Palette.LoadFromFile</a></li>
                    <li><a href="#Reference_Palette_LoadFromResource">Palette.LoadFromResource</a></li>
                    <li><a href="#Reference_Palette_GetColor">Palette.GetColor</a></li>
                    <li><a href="#Reference_Palette_SetColor">Palette.SetColor</a></li>
                    <li><a href="#Reference_Palette_MixPalettes">Palette.MixPalettes</a></li>
                    <li><a href="#Reference_Palette_RotateColorsLeft">Palette.RotateColorsLeft</a></li>
                    <li><a href="#Reference_Palette_RotateColorsRight">Palette.RotateColorsRight</a></li>
                    <li><a href="#Reference_Palette_CopyColors">Palette.CopyColors</a></li>
                    <li><a href="#Reference_Palette_SetPaletteIndexLines">Palette.SetPaletteIndexLines</a></li>
                </ul>
            </p>
            <p id="Reference_Resources">
                <h2>Resources</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Resources_LoadSprite">Resources.LoadSprite</a></li>
                    <li><a href="#Reference_Resources_LoadImage">Resources.LoadImage</a></li>
                    <li><a href="#Reference_Resources_LoadFont">Resources.LoadFont</a></li>
                    <li><a href="#Reference_Resources_LoadShader">Resources.LoadShader</a></li>
                    <li><a href="#Reference_Resources_LoadModel">Resources.LoadModel</a></li>
                    <li><a href="#Reference_Resources_LoadMusic">Resources.LoadMusic</a></li>
                    <li><a href="#Reference_Resources_LoadSound">Resources.LoadSound</a></li>
                    <li><a href="#Reference_Resources_LoadVideo">Resources.LoadVideo</a></li>
                    <li><a href="#Reference_Resources_FileExists">Resources.FileExists</a></li>
                    <li><a href="#Reference_Resources_UnloadImage">Resources.UnloadImage</a></li>
                </ul>
            </p>
            <p id="Reference_Scene">
                <h2>Scene</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Scene_Load">Scene.Load</a></li>
                    <li><a href="#Reference_Scene_LoadTileCollisions">Scene.LoadTileCollisions</a></li>
                    <li><a href="#Reference_Scene_Restart">Scene.Restart</a></li>
                    <li><a href="#Reference_Scene_GetLayerCount">Scene.GetLayerCount</a></li>
                    <li><a href="#Reference_Scene_GetLayerIndex">Scene.GetLayerIndex</a></li>
                    <li><a href="#Reference_Scene_GetName">Scene.GetName</a></li>
                    <li><a href="#Reference_Scene_GetWidth">Scene.GetWidth</a></li>
                    <li><a href="#Reference_Scene_GetHeight">Scene.GetHeight</a></li>
                    <li><a href="#Reference_Scene_GetTileSize">Scene.GetTileSize</a></li>
                    <li><a href="#Reference_Scene_GetTileID">Scene.GetTileID</a></li>
                    <li><a href="#Reference_Scene_GetTileFlipX">Scene.GetTileFlipX</a></li>
                    <li><a href="#Reference_Scene_GetTileFlipY">Scene.GetTileFlipY</a></li>
                    <li><a href="#Reference_Scene_SetTile">Scene.SetTile</a></li>
                    <li><a href="#Reference_Scene_SetTileCollisionSides">Scene.SetTileCollisionSides</a></li>
                    <li><a href="#Reference_Scene_SetPaused">Scene.SetPaused</a></li>
                    <li><a href="#Reference_Scene_SetLayerVisible">Scene.SetLayerVisible</a></li>
                    <li><a href="#Reference_Scene_SetLayerCollidable">Scene.SetLayerCollidable</a></li>
                    <li><a href="#Reference_Scene_SetLayerInternalSize">Scene.SetLayerInternalSize</a></li>
                    <li><a href="#Reference_Scene_SetLayerOffsetPosition">Scene.SetLayerOffsetPosition</a></li>
                    <li><a href="#Reference_Scene_SetLayerDrawGroup">Scene.SetLayerDrawGroup</a></li>
                    <li><a href="#Reference_Scene_SetLayerDrawBehavior">Scene.SetLayerDrawBehavior</a></li>
                    <li><a href="#Reference_Scene_SetLayerScroll">Scene.SetLayerScroll</a></li>
                    <li><a href="#Reference_Scene_SetLayerSetParallaxLinesBegin">Scene.SetLayerSetParallaxLinesBegin</a></li>
                    <li><a href="#Reference_Scene_SetLayerSetParallaxLines">Scene.SetLayerSetParallaxLines</a></li>
                    <li><a href="#Reference_Scene_SetLayerSetParallaxLinesEnd">Scene.SetLayerSetParallaxLinesEnd</a></li>
                    <li><a href="#Reference_Scene_SetLayerTileDeforms">Scene.SetLayerTileDeforms</a></li>
                    <li><a href="#Reference_Scene_SetLayerTileDeformSplitLine">Scene.SetLayerTileDeformSplitLine</a></li>
                    <li><a href="#Reference_Scene_SetLayerTileDeformOffsets">Scene.SetLayerTileDeformOffsets</a></li>
                    <li><a href="#Reference_Scene_SetLayerCustomScanlineFunction">Scene.SetLayerCustomScanlineFunction</a></li>
                    <li><a href="#Reference_Scene_SetTileScanline">Scene.SetTileScanline</a></li>
                    <li><a href="#Reference_Scene_IsPaused">Scene.IsPaused</a></li>
                </ul>
            </p>
            <p id="Reference_Shader">
                <h2>Shader</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Shader_Set">Shader.Set</a></li>
                    <li><a href="#Reference_Shader_GetUniform">Shader.GetUniform</a></li>
                    <li><a href="#Reference_Shader_SetUniformI">Shader.SetUniformI</a></li>
                    <li><a href="#Reference_Shader_SetUniformF">Shader.SetUniformF</a></li>
                    <li><a href="#Reference_Shader_SetUniform3x3">Shader.SetUniform3x3</a></li>
                    <li><a href="#Reference_Shader_SetUniform4x4">Shader.SetUniform4x4</a></li>
                    <li><a href="#Reference_Shader_SetUniformTexture">Shader.SetUniformTexture</a></li>
                    <li><a href="#Reference_Shader_Unset">Shader.Unset</a></li>
                </ul>
            </p>
            <p id="Reference_SocketClient">
                <h2>SocketClient</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_SocketClient_Open">SocketClient.Open</a></li>
                    <li><a href="#Reference_SocketClient_Close">SocketClient.Close</a></li>
                    <li><a href="#Reference_SocketClient_IsOpen">SocketClient.IsOpen</a></li>
                    <li><a href="#Reference_SocketClient_Poll">SocketClient.Poll</a></li>
                    <li><a href="#Reference_SocketClient_BytesToRead">SocketClient.BytesToRead</a></li>
                    <li><a href="#Reference_SocketClient_ReadDecimal">SocketClient.ReadDecimal</a></li>
                    <li><a href="#Reference_SocketClient_ReadInteger">SocketClient.ReadInteger</a></li>
                    <li><a href="#Reference_SocketClient_ReadString">SocketClient.ReadString</a></li>
                    <li><a href="#Reference_SocketClient_WriteDecimal">SocketClient.WriteDecimal</a></li>
                    <li><a href="#Reference_SocketClient_WriteInteger">SocketClient.WriteInteger</a></li>
                    <li><a href="#Reference_SocketClient_WriteString">SocketClient.WriteString</a></li>
                </ul>
            </p>
            <p id="Reference_Sound">
                <h2>Sound</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Sound_Play">Sound.Play</a></li>
                    <li><a href="#Reference_Sound_Loop">Sound.Loop</a></li>
                    <li><a href="#Reference_Sound_Stop">Sound.Stop</a></li>
                    <li><a href="#Reference_Sound_Pause">Sound.Pause</a></li>
                    <li><a href="#Reference_Sound_Resume">Sound.Resume</a></li>
                    <li><a href="#Reference_Sound_StopAll">Sound.StopAll</a></li>
                    <li><a href="#Reference_Sound_PauseAll">Sound.PauseAll</a></li>
                    <li><a href="#Reference_Sound_ResumeAll">Sound.ResumeAll</a></li>
                    <li><a href="#Reference_Sound_IsPlaying">Sound.IsPlaying</a></li>
                </ul>
            </p>
            <p id="Reference_Sprite">
                <h2>Sprite</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Sprite_GetAnimationCount">Sprite.GetAnimationCount</a></li>
                    <li><a href="#Reference_Sprite_GetFrameLoopIndex">Sprite.GetFrameLoopIndex</a></li>
                    <li><a href="#Reference_Sprite_GetFrameCount">Sprite.GetFrameCount</a></li>
                    <li><a href="#Reference_Sprite_GetFrameDuration">Sprite.GetFrameDuration</a></li>
                    <li><a href="#Reference_Sprite_GetFrameSpeed">Sprite.GetFrameSpeed</a></li>
                </ul>
            </p>
            <p id="Reference_String">
                <h2>String</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_String_Split">String.Split</a></li>
                    <li><a href="#Reference_String_CharAt">String.CharAt</a></li>
                    <li><a href="#Reference_String_Length">String.Length</a></li>
                    <li><a href="#Reference_String_Compare">String.Compare</a></li>
                    <li><a href="#Reference_String_IndexOf">String.IndexOf</a></li>
                    <li><a href="#Reference_String_Contains">String.Contains</a></li>
                    <li><a href="#Reference_String_Substring">String.Substring</a></li>
                    <li><a href="#Reference_String_ToUpperCase">String.ToUpperCase</a></li>
                    <li><a href="#Reference_String_ToLowerCase">String.ToLowerCase</a></li>
                    <li><a href="#Reference_String_LastIndexOf">String.LastIndexOf</a></li>
                    <li><a href="#Reference_String_ParseInteger">String.ParseInteger</a></li>
                    <li><a href="#Reference_String_ParseDecimal">String.ParseDecimal</a></li>
                </ul>
            </p>
            <p id="Reference_Texture">
                <h2>Texture</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Texture_Create">Texture.Create</a></li>
                    <li><a href="#Reference_Texture_FromSprite">Texture.FromSprite</a></li>
                    <li><a href="#Reference_Texture_FromImage">Texture.FromImage</a></li>
                    <li><a href="#Reference_Texture_SetInterpolation">Texture.SetInterpolation</a></li>
                </ul>
            </p>
            <p id="Reference_Thread">
                <h2>Thread</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Thread_RunEvent">Thread.RunEvent</a></li>
                    <li><a href="#Reference_Thread_Sleep">Thread.Sleep</a></li>
                </ul>
            </p>
            <p id="Reference_TileCollision">
                <h2>TileCollision</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_TileCollision_Point">TileCollision.Point</a></li>
                    <li><a href="#Reference_TileCollision_PointExtended">TileCollision.PointExtended</a></li>
                    <li><a href="#Reference_TileCollision_Line">TileCollision.Line</a></li>
                </ul>
            </p>
            <p id="Reference_TileInfo">
                <h2>TileInfo</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_TileInfo_SetSpriteInfo">TileInfo.SetSpriteInfo</a></li>
                    <li><a href="#Reference_TileInfo_IsEmptySpace">TileInfo.IsEmptySpace</a></li>
                    <li><a href="#Reference_TileInfo_GetCollision">TileInfo.GetCollision</a></li>
                    <li><a href="#Reference_TileInfo_GetAngle">TileInfo.GetAngle</a></li>
                    <li><a href="#Reference_TileInfo_GetBehaviorFlag">TileInfo.GetBehaviorFlag</a></li>
                </ul>
            </p>
            <p id="Reference_Touch">
                <h2>Touch</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Touch_GetX">Touch.GetX</a></li>
                    <li><a href="#Reference_Touch_GetY">Touch.GetY</a></li>
                    <li><a href="#Reference_Touch_IsDown">Touch.IsDown</a></li>
                    <li><a href="#Reference_Touch_IsPressed">Touch.IsPressed</a></li>
                    <li><a href="#Reference_Touch_IsReleased">Touch.IsReleased</a></li>
                </ul>
            </p>
            <p id="Reference_Video">
                <h2>Video</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Video_Play">Video.Play</a></li>
                    <li><a href="#Reference_Video_Pause">Video.Pause</a></li>
                    <li><a href="#Reference_Video_Resume">Video.Resume</a></li>
                    <li><a href="#Reference_Video_Stop">Video.Stop</a></li>
                    <li><a href="#Reference_Video_Close">Video.Close</a></li>
                    <li><a href="#Reference_Video_IsBuffering">Video.IsBuffering</a></li>
                    <li><a href="#Reference_Video_IsPlaying">Video.IsPlaying</a></li>
                    <li><a href="#Reference_Video_IsPaused">Video.IsPaused</a></li>
                    <li><a href="#Reference_Video_SetPosition">Video.SetPosition</a></li>
                    <li><a href="#Reference_Video_SetBufferDuration">Video.SetBufferDuration</a></li>
                    <li><a href="#Reference_Video_SetTrackEnabled">Video.SetTrackEnabled</a></li>
                    <li><a href="#Reference_Video_GetPosition">Video.GetPosition</a></li>
                    <li><a href="#Reference_Video_GetDuration">Video.GetDuration</a></li>
                    <li><a href="#Reference_Video_GetBufferDuration">Video.GetBufferDuration</a></li>
                    <li><a href="#Reference_Video_GetBufferEnd">Video.GetBufferEnd</a></li>
                    <li><a href="#Reference_Video_GetTrackCount">Video.GetTrackCount</a></li>
                    <li><a href="#Reference_Video_GetTrackEnabled">Video.GetTrackEnabled</a></li>
                    <li><a href="#Reference_Video_GetTrackName">Video.GetTrackName</a></li>
                    <li><a href="#Reference_Video_GetTrackLanguage">Video.GetTrackLanguage</a></li>
                    <li><a href="#Reference_Video_GetDefaultVideoTrack">Video.GetDefaultVideoTrack</a></li>
                    <li><a href="#Reference_Video_GetDefaultAudioTrack">Video.GetDefaultAudioTrack</a></li>
                    <li><a href="#Reference_Video_GetDefaultSubtitleTrack">Video.GetDefaultSubtitleTrack</a></li>
                    <li><a href="#Reference_Video_GetWidth">Video.GetWidth</a></li>
                    <li><a href="#Reference_Video_GetHeight">Video.GetHeight</a></li>
                </ul>
            </p>
            <p id="Reference_View">
                <h2>View</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_View_SetX">View.SetX</a></li>
                    <li><a href="#Reference_View_SetY">View.SetY</a></li>
                    <li><a href="#Reference_View_SetZ">View.SetZ</a></li>
                    <li><a href="#Reference_View_SetPosition">View.SetPosition</a></li>
                    <li><a href="#Reference_View_SetAngle">View.SetAngle</a></li>
                    <li><a href="#Reference_View_GetX">View.GetX</a></li>
                    <li><a href="#Reference_View_GetY">View.GetY</a></li>
                    <li><a href="#Reference_View_GetZ">View.GetZ</a></li>
                    <li><a href="#Reference_View_GetWidth">View.GetWidth</a></li>
                    <li><a href="#Reference_View_GetHeight">View.GetHeight</a></li>
                    <li><a href="#Reference_View_SetSize">View.SetSize</a></li>
                    <li><a href="#Reference_View_IsUsingDrawTarget">View.IsUsingDrawTarget</a></li>
                    <li><a href="#Reference_View_SetUseDrawTarget">View.SetUseDrawTarget</a></li>
                    <li><a href="#Reference_View_IsUsingSoftwareRenderer">View.IsUsingSoftwareRenderer</a></li>
                    <li><a href="#Reference_View_SetUseSoftwareRenderer">View.SetUseSoftwareRenderer</a></li>
                    <li><a href="#Reference_View_SetUsePerspective">View.SetUsePerspective</a></li>
                    <li><a href="#Reference_View_IsEnabled">View.IsEnabled</a></li>
                    <li><a href="#Reference_View_SetEnabled">View.SetEnabled</a></li>
                    <li><a href="#Reference_View_SetFieldOfView">View.SetFieldOfView</a></li>
                    <li><a href="#Reference_View_GetCurrent">View.GetCurrent</a></li>
                </ul>
            </p>
            <p id="Reference_Window">
                <h2>Window</h2>
                <i>Functions:</i>
                <ul>
                    <li><a href="#Reference_Window_SetSize">Window.SetSize</a></li>
                    <li><a href="#Reference_Window_SetFullscreen">Window.SetFullscreen</a></li>
                    <li><a href="#Reference_Window_SetBorderless">Window.SetBorderless</a></li>
                    <li><a href="#Reference_Window_SetPosition">Window.SetPosition</a></li>
                    <li><a href="#Reference_Window_SetPositionCentered">Window.SetPositionCentered</a></li>
                    <li><a href="#Reference_Window_SetTitle">Window.SetTitle</a></li>
                    <li><a href="#Reference_Window_GetWidth">Window.GetWidth</a></li>
                    <li><a href="#Reference_Window_GetHeight">Window.GetHeight</a></li>
                    <li><a href="#Reference_Window_GetFullscreen">Window.GetFullscreen</a></li>
                </ul>
            </p>
        <h3>Functions</h3>
        <p>Note: Please use Find (Ctrl+F) there are way too many functions</p>
        <p id="Reference_Array_Create">
        <h2 style="margin-bottom: 8px;">Array.Create</h2>
        <code>Array.Create(size[, initialValue])</code>
        <div style="margin-top: 8px; font-size: 14px;">Creates an array.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>size (Integer): Size of the array.</li>
        <li>initialValue (Value): Initial value to set the array elements to.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">A reference value to the array.</div>
        </p>
        <hr/>
        <p id="Reference_Array_Length">
        <h2 style="margin-bottom: 8px;">Array.Length</h2>
        <code>Array.Length(array)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the length of an array.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to get the length of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Length of the array.</div>
        </p>
        <hr/>
        <p id="Reference_Array_Push">
        <h2 style="margin-bottom: 8px;">Array.Push</h2>
        <code>Array.Push(array, value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Adds a value to the end of an array.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to get the length of.</li>
        <li>value (Value): Value to add to the array.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Array_Pop">
        <h2 style="margin-bottom: 8px;">Array.Pop</h2>
        <code>Array.Pop(array)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the value at the end of an array, and removes it.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to get the length of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">The value from the end of the array.</div>
        </p>
        <hr/>
        <p id="Reference_Array_Insert">
        <h2 style="margin-bottom: 8px;">Array.Insert</h2>
        <code>Array.Insert(array, index, value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Inserts a value at an index of an array.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to insert value.</li>
        <li>index (Integer): Index to insert value.</li>
        <li>value (Value): Value to insert.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Array_Erase">
        <h2 style="margin-bottom: 8px;">Array.Erase</h2>
        <code>Array.Erase(array, index)</code>
        <div style="margin-top: 8px; font-size: 14px;">Erases a value at an index of an array.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to erase value.</li>
        <li>index (Integer): Index to erase value.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Array_Clear">
        <h2 style="margin-bottom: 8px;">Array.Clear</h2>
        <code>Array.Clear(array)</code>
        <div style="margin-top: 8px; font-size: 14px;">Clears an array.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to clear.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Array_Shift">
        <h2 style="margin-bottom: 8px;">Array.Shift</h2>
        <code>Array.Shift(array, toRight)</code>
        <div style="margin-top: 8px; font-size: 14px;">Rotates the array in the desired direction.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to shift.</li>
        <li>toRight (Boolean): Whether to rotate the array to the right or not (left.)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Array_SetAll">
        <h2 style="margin-bottom: 8px;">Array.SetAll</h2>
        <code>Array.SetAll(array, startIndex, endIndex, value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets values in the array from startIndex to endIndex (includes the value at endIndex.)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>array (Array): Array to set values to.</li>
        <li>startIndex (Integer): Index of value to start setting. (-1 for first index)</li>
        <li>endIndex (Integer): Index of value to end setting. (-1 for last index)</li>
        <li>value (Value): Value to set to.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Date_GetEpoch">
        <h2 style="margin-bottom: 8px;">Date.GetEpoch</h2>
        <code>Date.GetEpoch()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the amount of seconds from 1 January 1970, 0:00 UTC.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">The amount of seconds from epoch.</div>
        </p>
        <hr/>
        <p id="Reference_Date_GetTicks">
        <h2 style="margin-bottom: 8px;">Date.GetTicks</h2>
        <code>Date.GetTicks()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the milliseconds since the application began running.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns milliseconds since the application began running.</div>
        </p>
        <hr/>
        <p id="Reference_Device_GetPlatform">
        <h2 style="margin-bottom: 8px;">Device.GetPlatform</h2>
        <code>Device.GetPlatform()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the id of the platform the application is currently running on. <br/></br>Platform IDs:<ul><li>Unknown = 0</li><li>Windows = 1</li><li>MacOS = 2</li><li>Linux = 3</li><li>Switch = 5</li><li>Android = 8</li><li>iOS = 9</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns ID of the current platform.</div>
        </p>
        <hr/>
        <p id="Reference_Device_IsMobile">
        <h2 style="margin-bottom: 8px;">Device.IsMobile</h2>
        <code>Device.IsMobile()</code>
        <div style="margin-top: 8px; font-size: 14px;">Determines whether or not the application is running on a mobile device.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">1 if the device is on a mobile device, 0 if otherwise.</div>
        </p>
        <hr/>
        <p id="Reference_Directory_Create">
        <h2 style="margin-bottom: 8px;">Directory.Create</h2>
        <code>Directory.Create(path)</code>
        <div style="margin-top: 8px; font-size: 14px;">Creates a folder at the path.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>path (String): The path of the folder to create.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns 1 if the folder creation was successful, 0 if otherwise</div>
        </p>
        <hr/>
        <p id="Reference_Directory_Exists">
        <h2 style="margin-bottom: 8px;">Directory.Exists</h2>
        <code>Directory.Exists(path)</code>
        <div style="margin-top: 8px; font-size: 14px;">Determines if the folder at the path exists.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>path (String): The path of the folder to check for existence.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns 1 if the folder exists, 0 if otherwise</div>
        </p>
        <hr/>
        <p id="Reference_Directory_GetFiles">
        <h2 style="margin-bottom: 8px;">Directory.GetFiles</h2>
        <code>Directory.GetFiles(directory, pattern, allDirs)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the paths of all the files in the directory.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>directory (String): The path of the folder to find files in.</li>
        <li>pattern (String): The search pattern for the files. (ex: "*" for any file, "*.*" any file name with any file type, "*.png" any PNG file)</li>
        <li>allDirs (Boolean): Whether or not to search into all folders in the directory.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an Array containing the filepaths (as Strings.)</div>
        </p>
        <hr/>
        <p id="Reference_Directory_GetDirectories">
        <h2 style="margin-bottom: 8px;">Directory.GetDirectories</h2>
        <code>Directory.GetDirectories(directory, pattern, allDirs)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the paths of all the folders in the directory.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>directory (String): The path of the folder to find folders in.</li>
        <li>pattern (String): The search pattern for the folders. (ex: "*" for any folder, "image*" any folder that starts with "image")</li>
        <li>allDirs (Boolean): Whether or not to search into all folders in the directory.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an Array containing the filepaths (as Strings.)</div>
        </p>
        <hr/>
        <p id="Reference_Display_GetWidth">
        <h2 style="margin-bottom: 8px;">Display.GetWidth</h2>
        <code>Display.GetWidth([index])</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the width of the current display.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>index (Integer): The display index to get the width of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the width of the current display.</div>
        </p>
        <hr/>
        <p id="Reference_Display_GetHeight">
        <h2 style="margin-bottom: 8px;">Display.GetHeight</h2>
        <code>Display.GetHeight([index])</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the height of the current display.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>index (Integer): The display index to get the width of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the height of the current display.</div>
        </p>
        <hr/>
        <p id="Reference_Draw_Sprite">
        <h2 style="margin-bottom: 8px;">Draw.Sprite</h2>
        <code>Draw.Sprite(sprite, animation, frame, x, y, flipX, flipY[, scaleX, scaleY, rotation])</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a sprite.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): Index of the loaded sprite.</li>
        <li>animation (Integer): Index of the animation entry.</li>
        <li>frame (Integer): Index of the frame in the animation entry.</li>
        <li>x (Number): X position of where to draw the sprite.</li>
        <li>y (Number): Y position of where to draw the sprite.</li>
        <li>flipX (Integer): Whether or not to flip the sprite horizontally.</li>
        <li>flipY (Integer): Whether or not to flip the sprite vertically.</li>
        <li>scaleX (Number): Scale multiplier of the sprite horizontally.</li>
        <li>scaleY (Number): Scale multiplier of the sprite vertically.</li>
        <li>rotation (Number): Rotation of the drawn sprite in radians.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SpritePart">
        <h2 style="margin-bottom: 8px;">Draw.SpritePart</h2>
        <code>Draw.SpritePart(sprite, animation, frame, x, y, partX, partY, partW, partH, flipX, flipY[, scaleX, scaleY, rotation])</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws part of a sprite.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): Index of the loaded sprite.</li>
        <li>animation (Integer): Index of the animation entry.</li>
        <li>frame (Integer): Index of the frame in the animation entry.</li>
        <li>x (Number): X position of where to draw the sprite.</li>
        <li>y (Number): Y position of where to draw the sprite.</li>
        <li>partX (Integer): X coordinate of part of frame to draw.</li>
        <li>partY (Integer): Y coordinate of part of frame to draw.</li>
        <li>partW (Integer): Width of part of frame to draw.</li>
        <li>partH (Integer): Height of part of frame to draw.</li>
        <li>flipX (Integer): Whether or not to flip the sprite horizontally.</li>
        <li>flipY (Integer): Whether or not to flip the sprite vertically.</li>
        <li>scaleX (Number): Scale multiplier of the sprite horizontally.</li>
        <li>scaleY (Number): Scale multiplier of the sprite vertically.</li>
        <li>rotation (Number): Rotation of the drawn sprite in radians.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Image">
        <h2 style="margin-bottom: 8px;">Draw.Image</h2>
        <code>Draw.Image(image, x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws an image.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>image (Integer): Index of the loaded image.</li>
        <li>x (Number): X position of where to draw the image.</li>
        <li>y (Number): Y position of where to draw the image.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_ImagePart">
        <h2 style="margin-bottom: 8px;">Draw.ImagePart</h2>
        <code>Draw.ImagePart(image, partX, partY, partW, partH, x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws part of an image.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>image (Integer): Index of the loaded image.</li>
        <li>partX (Integer): X coordinate of part of image to draw.</li>
        <li>partY (Integer): Y coordinate of part of image to draw.</li>
        <li>partW (Integer): Width of part of image to draw.</li>
        <li>partH (Integer): Height of part of image to draw.</li>
        <li>x (Number): X position of where to draw the image.</li>
        <li>y (Number): Y position of where to draw the image.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_ImageSized">
        <h2 style="margin-bottom: 8px;">Draw.ImageSized</h2>
        <code>Draw.ImageSized(x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws an image, but sized.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position of where to draw the image.</li>
        <li>y (Number): Y position of where to draw the image.</li>
        <li>width (Number): Width to draw the image.</li>
        <li>height (Number): Height to draw the image.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_ImagePartSized">
        <h2 style="margin-bottom: 8px;">Draw.ImagePartSized</h2>
        <code>Draw.ImagePartSized(image, partX, partY, partW, partH, x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws part of an image, but sized.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>image (Integer): Index of the loaded image.</li>
        <li>partX (Integer): X coordinate of part of image to draw.</li>
        <li>partY (Integer): Y coordinate of part of image to draw.</li>
        <li>partW (Integer): Width of part of image to draw.</li>
        <li>partH (Integer): Height of part of image to draw.</li>
        <li>x (Number): X position of where to draw the image.</li>
        <li>y (Number): Y position of where to draw the image.</li>
        <li>width (Number): Width to draw the image.</li>
        <li>height (Number): Height to draw the image.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_InitArrayBuffer">
        <h2 style="margin-bottom: 8px;">Draw.InitArrayBuffer</h2>
        <code>Draw.InitArrayBuffer(arrayBufferIndex, maxVertices)</code>
        <div style="margin-top: 8px; font-size: 14px;">Initializes an array buffer. There are 32 array buffers.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>arrayBufferIndex (Integer): The array buffer at the index to use. (Maximum index: 31)</li>
        <li>maxVertices (Integer): The maximum vertices that this array buffer will hold.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetAmbientLighting">
        <h2 style="margin-bottom: 8px;">Draw.SetAmbientLighting</h2>
        <code>Draw.SetAmbientLighting(arrayBufferIndex, red, green, blue)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the ambient lighting of the array buffer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>arrayBufferIndex (Integer): The index of the array buffer.</li>
        <li>red (Number): The red color value, bounded by 0.0 - 1.0.</li>
        <li>green (Number): The green color value, bounded by 0.0 - 1.0.</li>
        <li>blue (Number): The blue color value, bounded by 0.0 - 1.0.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetDiffuseLighting">
        <h2 style="margin-bottom: 8px;">Draw.SetDiffuseLighting</h2>
        <code>Draw.SetDiffuseLighting(arrayBufferIndex, red, green, blue)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the diffuse lighting of the array buffer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>arrayBufferIndex (Integer): The index of the array buffer.</li>
        <li>red (Number): The red color value, bounded by 0.0 - 1.0.</li>
        <li>green (Number): The green color value, bounded by 0.0 - 1.0.</li>
        <li>blue (Number): The blue color value, bounded by 0.0 - 1.0.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetSpecularLighting">
        <h2 style="margin-bottom: 8px;">Draw.SetSpecularLighting</h2>
        <code>Draw.SetSpecularLighting(arrayBufferIndex, red, green, blue)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the specular lighting of the array buffer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>arrayBufferIndex (Integer): The index of the array buffer.</li>
        <li>red (Number): The red color value, bounded by 0.0 - 1.0.</li>
        <li>green (Number): The green color value, bounded by 0.0 - 1.0.</li>
        <li>blue (Number): The blue color value, bounded by 0.0 - 1.0.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_BindArrayBuffer">
        <h2 style="margin-bottom: 8px;">Draw.BindArrayBuffer</h2>
        <code>Draw.BindArrayBuffer(arrayBufferIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Binds an array buffer for drawing models.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>arrayBufferIndex (Integer): Sets the array buffer to bind.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Model">
        <h2 style="margin-bottom: 8px;">Draw.Model</h2>
        <code>Draw.Model(modelIndex, frame, matrixView, matrixNormal)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a model.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>modelIndex (Integer): Index of loaded model.</li>
        <li>frame (Integer): Frame of model to draw.</li>
        <li>matrixView (Matrix): Matrix for transforming model coordinates to screen space.</li>
        <li>matrixNormal (Matrix): Matrix for transforming model normals.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_ModelSimple">
        <h2 style="margin-bottom: 8px;">Draw.ModelSimple</h2>
        <code>Draw.ModelSimple(modelIndex, frame, x, y, scale, rx, ry, rz)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a model without using matrices.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>modelIndex (Integer): Index of loaded model.</li>
        <li>frame (Integer): Frame of model to draw.</li>
        <li>x (Number): X position</li>
        <li>y (Number): Y position</li>
        <li>scale (Number): Model scale</li>
        <li>rx (Number): X rotation in radians</li>
        <li>ry (Number): Y rotation in radians</li>
        <li>rz (Number): Z rotation in radians</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_RenderArrayBuffer">
        <h2 style="margin-bottom: 8px;">Draw.RenderArrayBuffer</h2>
        <code>Draw.RenderArrayBuffer(arrayBufferIndex, drawMode)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws everything in the array buffer with the specified draw mode. <br/></br>Draw Modes:<ul><li><code>DrawMode_LINES</code>: Draws the model faces with lines, using a solid color determined by the model's existing colors (and if not, the blend color.)</li><li><code>DrawMode_LINES_FLAT</code>: Draws the model faces with lines, using a color for the face calculated with the vertex normals, the model's existing colors (and if not, the blend color.)</li><li><code>DrawMode_LINES_SMOOTH</code>: Draws the model faces with lines, using a color smoothly spread across the face calculated with the vertex normals, the model's existing colors (and if not, the blend color.)</li><li><code>DrawMode_POLYGONS</code>: Draws the model faces with polygons, using a solid color determined by the model's existing colors (and if not, the blend color.)</li><li><code>DrawMode_POLYGONS_FLAT</code>: Draws the model faces with polygons, using a color for the face calculated with the vertex normals, the model's existing colors (and if not, the blend color.)</li><li><code>DrawMode_POLYGONS_SMOOTH</code>: Draws the model faces with polygons, using a color smoothly spread across the face calculated with the vertex normals, the model's existing colors (and if not, the blend color.)</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>arrayBufferIndex (Integer): The array buffer at the index to draw.</li>
        <li>drawMode (Integer): The type of drawing to use for the vertices in the array buffer.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Video">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Video</h2>
        <code>Draw.Video()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_VideoPart">
        <h2 style="margin-bottom: 8px; color: red;">Draw.VideoPart</h2>
        <code>Draw.VideoPart()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_VideoSized">
        <h2 style="margin-bottom: 8px; color: red;">Draw.VideoSized</h2>
        <code>Draw.VideoSized()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_VideoPartSized">
        <h2 style="margin-bottom: 8px; color: red;">Draw.VideoPartSized</h2>
        <code>Draw.VideoPartSized()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_Tile">
        <h2 style="margin-bottom: 8px;">Draw.Tile</h2>
        <code>Draw.Tile(ID, x, y, flipX, flipY)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a tile.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>ID (Integer): ID of the tile to draw.</li>
        <li>x (Number): X position of where to draw the tile.</li>
        <li>y (Number): Y position of where to draw the tile.</li>
        <li>flipX (Integer): Whether or not to flip the tile horizontally.</li>
        <li>flipY (Integer): Whether or not to flip the tile vertically.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Texture">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Texture</h2>
        <code>Draw.Texture()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_TextureSized">
        <h2 style="margin-bottom: 8px; color: red;">Draw.TextureSized</h2>
        <code>Draw.TextureSized()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_TexturePart">
        <h2 style="margin-bottom: 8px; color: red;">Draw.TexturePart</h2>
        <code>Draw.TexturePart()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_SetFont">
        <h2 style="margin-bottom: 8px; color: red;">Draw.SetFont</h2>
        <code>Draw.SetFont()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_SetTextAlign">
        <h2 style="margin-bottom: 8px;">Draw.SetTextAlign</h2>
        <code>Draw.SetTextAlign(baseline)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the text drawing horizontal alignment. (default: left)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>baseline (Integer): 0 for left, 1 for center, 2 for right.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetTextBaseline">
        <h2 style="margin-bottom: 8px;">Draw.SetTextBaseline</h2>
        <code>Draw.SetTextBaseline(baseline)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the text drawing vertical alignment. (default: top)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>baseline (Integer): 0 for top, 1 for baseline, 2 for bottom.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetTextAdvance">
        <h2 style="margin-bottom: 8px;">Draw.SetTextAdvance</h2>
        <code>Draw.SetTextAdvance(ascent)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the character spacing multiplier. (default: 1.0)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>ascent (Number): Multiplier for character spacing.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetTextLineAscent">
        <h2 style="margin-bottom: 8px;">Draw.SetTextLineAscent</h2>
        <code>Draw.SetTextLineAscent(ascent)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the line height multiplier. (default: 1.25)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>ascent (Number): Multiplier for line height.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_MeasureText">
        <h2 style="margin-bottom: 8px;">Draw.MeasureText</h2>
        <code>Draw.MeasureText(sprite, text)</code>
        <div style="margin-top: 8px; font-size: 14px;">Measures Extended UTF8 text using a sprite or font.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): Index of the loaded sprite to be used as text.</li>
        <li>text (String): Text to measure.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an array containing max width and max height.</div>
        </p>
        <hr/>
        <p id="Reference_Draw_MeasureTextWrapped">
        <h2 style="margin-bottom: 8px;">Draw.MeasureTextWrapped</h2>
        <code>Draw.MeasureTextWrapped(sprite, text, maxWidth[, maxLines])</code>
        <div style="margin-top: 8px; font-size: 14px;">Measures wrapped Extended UTF8 text using a sprite or font.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): Index of the loaded sprite to be used as text.</li>
        <li>text (String): Text to measure.</li>
        <li>maxWidth (Number): Max width that a line can be.</li>
        <li>maxLines (Integer): Max number of lines to measure.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an array containing max width and max height.</div>
        </p>
        <hr/>
        <p id="Reference_Draw_Text">
        <h2 style="margin-bottom: 8px;">Draw.Text</h2>
        <code>Draw.Text(sprite, text, x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws Extended UTF8 text using a sprite or font.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): Index of the loaded sprite to be used as text.</li>
        <li>text (String): Text to draw.</li>
        <li>x (Number): X position of where to draw the text.</li>
        <li>y (Number): Y position of where to draw the text.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_TextWrapped">
        <h2 style="margin-bottom: 8px;">Draw.TextWrapped</h2>
        <code>Draw.TextWrapped(sprite, text, x, y, maxWidth, maxLines)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws wrapped Extended UTF8 text using a sprite or font.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): Index of the loaded sprite to be used as text.</li>
        <li>text (String): Text to draw.</li>
        <li>x (Number): X position of where to draw the tile.</li>
        <li>y (Number): Y position of where to draw the tile.</li>
        <li>maxWidth (Number): Max width the text can draw in.</li>
        <li>maxLines (Integer): Max lines the text can draw.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_TextEllipsis">
        <h2 style="margin-bottom: 8px; color: red;">Draw.TextEllipsis</h2>
        <code>Draw.TextEllipsis()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_SetBlendColor">
        <h2 style="margin-bottom: 8px;">Draw.SetBlendColor</h2>
        <code>Draw.SetBlendColor(hex, alpha)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the color to be used for drawing and blending.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>hex (Integer): Hexadecimal format of desired color. (ex: Red = 0xFF0000, Green = 0x00FF00, Blue = 0x0000FF)</li>
        <li>alpha (Number): Opacity to use for drawing, 0.0 to 1.0.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetTextureBlend">
        <h2 style="margin-bottom: 8px;">Draw.SetTextureBlend</h2>
        <code>Draw.SetTextureBlend(doBlend)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets whether or not to use color and alpha blending on sprites, images, and textures.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>doBlend (Boolean): Whether or not to use blending.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetBlendMode">
        <h2 style="margin-bottom: 8px;">Draw.SetBlendMode</h2>
        <code>Draw.SetBlendMode(blendMode)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the blend mode used for drawing. <br/></br>Blend Modes:<ul><li><code>BlendMode_NORMAL</code>: Normal pixel blending.</li><li><code>BlendMode_ADD</code>: Additive pixel blending.</li><li><code>BlendMode_MAX</code>: Maximum pixel blending.</li><li><code>BlendMode_SUBTRACT</code>: Subtractive pixel blending.</li><li><code>BlendMode_MATCH_EQUAL</code>: (software-renderer only) Draw pixels only where it matches the Comparison Color.</li><li><code>BlendMode_MATCH_NOT_EQUAL</code>: (software-renderer only) Draw pixels only where it does not match the Comparison Color.</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>blendMode (Integer): The desired blend mode.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetBlendFactor">
        <h2 style="margin-bottom: 8px;">Draw.SetBlendFactor</h2>
        <code>Draw.SetBlendFactor(sourceFactor, destinationFactor)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the blend factors used for drawing. (Only for hardware-rendering)<br/></br>Blend Factors:<ul><li><code>BlendFactor_ZERO</code>: (0, 0, 0, 0)</li><li><code>BlendFactor_ONE</code>: (1, 1, 1, 1)</li><li><code>BlendFactor_SRC_COLOR</code>: (Rs, Gs, Bs, As)</li><li><code>BlendFactor_INV_SRC_COLOR</code>: (1-Rs, 1-Gs, 1-Bs, 1-As)</li><li><code>BlendFactor_SRC_ALPHA</code>: (As, As, As, As)</li><li><code>BlendFactor_INV_SRC_ALPHA</code>: (1-As, 1-As, 1-As, 1-As)</li><li><code>BlendFactor_DST_COLOR</code>: (Rd, Gd, Bd, Ad)</li><li><code>BlendFactor_INV_DST_COLOR</code>: (1-Rd, 1-Gd, 1-Bd, 1-Ad)</li><li><code>BlendFactor_DST_ALPHA</code>: (Ad, Ad, Ad, Ad)</li><li><code>BlendFactor_INV_DST_ALPHA</code>: (1-Ad, 1-Ad, 1-Ad, 1-Ad)</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sourceFactor (Integer): Source factor for blending.</li>
        <li>destinationFactor (Integer): Destination factor for blending.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetBlendFactorExtended">
        <h2 style="margin-bottom: 8px;">Draw.SetBlendFactorExtended</h2>
        <code>Draw.SetBlendFactorExtended(sourceColorFactor, destinationColorFactor, sourceAlphaFactor, destinationAlphaFactor)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets all the blend factors used for drawing. (Only for hardware-rendering)<br/></br>Blend Factors:<ul><li><code>BlendFactor_ZERO</code>: (0, 0, 0, 0)</li><li><code>BlendFactor_ONE</code>: (1, 1, 1, 1)</li><li><code>BlendFactor_SRC_COLOR</code>: (Rs, Gs, Bs, As)</li><li><code>BlendFactor_INV_SRC_COLOR</code>: (1-Rs, 1-Gs, 1-Bs, 1-As)</li><li><code>BlendFactor_SRC_ALPHA</code>: (As, As, As, As)</li><li><code>BlendFactor_INV_SRC_ALPHA</code>: (1-As, 1-As, 1-As, 1-As)</li><li><code>BlendFactor_DST_COLOR</code>: (Rd, Gd, Bd, Ad)</li><li><code>BlendFactor_INV_DST_COLOR</code>: (1-Rd, 1-Gd, 1-Bd, 1-Ad)</li><li><code>BlendFactor_DST_ALPHA</code>: (Ad, Ad, Ad, Ad)</li><li><code>BlendFactor_INV_DST_ALPHA</code>: (1-Ad, 1-Ad, 1-Ad, 1-Ad)</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sourceColorFactor (Integer): Source factor for blending color.</li>
        <li>destinationColorFactor (Integer): Destination factor for blending color.</li>
        <li>sourceAlphaFactor (Integer): Source factor for blending alpha.</li>
        <li>destinationAlphaFactor (Integer): Destination factor for blending alpha.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetCompareColor">
        <h2 style="margin-bottom: 8px;">Draw.SetCompareColor</h2>
        <code>Draw.SetCompareColor(hex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the Comparison Color to draw over for Comparison Drawing.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>hex (Integer): Hexadecimal format of desired color. (ex: Red = 0xFF0000, Green = 0x00FF00, Blue = 0x0000FF)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Line">
        <h2 style="margin-bottom: 8px;">Draw.Line</h2>
        <code>Draw.Line(x1, y1, x2, y2)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a line.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of where to start drawing the line.</li>
        <li>y1 (Number): Y position of where to start drawing the line.</li>
        <li>x2 (Number): X position of where to end drawing the line.</li>
        <li>y2 (Number): Y position of where to end drawing the line.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Circle">
        <h2 style="margin-bottom: 8px;">Draw.Circle</h2>
        <code>Draw.Circle(x, y, radius)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a circle.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): Center X position of where to draw the circle.</li>
        <li>y (Number): Center Y position of where to draw the circle.</li>
        <li>radius (Number): Radius of the circle.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Ellipse">
        <h2 style="margin-bottom: 8px;">Draw.Ellipse</h2>
        <code>Draw.Ellipse(x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws an ellipse.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position of where to draw the ellipse.</li>
        <li>y (Number): Y position of where to draw the ellipse.</li>
        <li>width (Number): Width to draw the ellipse at.</li>
        <li>height (Number): Height to draw the ellipse at.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Triangle">
        <h2 style="margin-bottom: 8px;">Draw.Triangle</h2>
        <code>Draw.Triangle(x1, y1, x2, y2, x3, y3)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a triangle.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of the first vertex.</li>
        <li>y1 (Number): Y position of the first vertex.</li>
        <li>x2 (Number): X position of the second vertex.</li>
        <li>y2 (Number): Y position of the second vertex.</li>
        <li>x3 (Number): X position of the third vertex.</li>
        <li>y3 (Number): Y position of the third vertex.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_TriangleBlend">
        <h2 style="margin-bottom: 8px;">Draw.TriangleBlend</h2>
        <code>Draw.TriangleBlend(x1, y1, x2, y2, x3, y3, color1, color2, color3)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a triangle, blending the colors at the vertices. (Colors are multipled by the global Draw Blend Color, do <code>Draw.SetBlendColor(0xFFFFFF, 1.0)</code> if you want the vertex colors unaffected.)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of the first vertex.</li>
        <li>y1 (Number): Y position of the first vertex.</li>
        <li>x2 (Number): X position of the second vertex.</li>
        <li>y2 (Number): Y position of the second vertex.</li>
        <li>x3 (Number): X position of the third vertex.</li>
        <li>y3 (Number): Y position of the third vertex.</li>
        <li>color1 (Integer): Color of the first vertex.</li>
        <li>color2 (Integer): Color of the second vertex.</li>
        <li>color3 (Integer): Color of the third vertex.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_QuadBlend">
        <h2 style="margin-bottom: 8px;">Draw.QuadBlend</h2>
        <code>Draw.QuadBlend(x1, y1, x2, y2, x3, y3, x4, y4, color1, color2, color3, color4)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a triangle, blending the colors at the vertices. (Colors are multipled by the global Draw Blend Color, do <code>Draw.SetBlendColor(0xFFFFFF, 1.0)</code> if you want the vertex colors unaffected.)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of the first vertex.</li>
        <li>y1 (Number): Y position of the first vertex.</li>
        <li>x2 (Number): X position of the second vertex.</li>
        <li>y2 (Number): Y position of the second vertex.</li>
        <li>x3 (Number): X position of the third vertex.</li>
        <li>y3 (Number): Y position of the third vertex.</li>
        <li>x4 (Number): X position of the fourth vertex.</li>
        <li>y4 (Number): Y position of the fourth vertex.</li>
        <li>color1 (Integer): Color of the first vertex.</li>
        <li>color2 (Integer): Color of the second vertex.</li>
        <li>color3 (Integer): Color of the third vertex.</li>
        <li>color4 (Integer): Color of the fourth vertex.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_Rectangle">
        <h2 style="margin-bottom: 8px;">Draw.Rectangle</h2>
        <code>Draw.Rectangle(x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a rectangle.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position of where to draw the rectangle.</li>
        <li>y (Number): Y position of where to draw the rectangle.</li>
        <li>width (Number): Width to draw the rectangle at.</li>
        <li>height (Number): Height to draw the rectangle at.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_CircleStroke">
        <h2 style="margin-bottom: 8px;">Draw.CircleStroke</h2>
        <code>Draw.CircleStroke(x, y, radius)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a circle outline.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): Center X position of where to draw the circle.</li>
        <li>y (Number): Center Y position of where to draw the circle.</li>
        <li>radius (Number): Radius of the circle.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_EllipseStroke">
        <h2 style="margin-bottom: 8px;">Draw.EllipseStroke</h2>
        <code>Draw.EllipseStroke(x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws an ellipse outline.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position of where to draw the ellipse.</li>
        <li>y (Number): Y position of where to draw the ellipse.</li>
        <li>width (Number): Width to draw the ellipse at.</li>
        <li>height (Number): Height to draw the ellipse at.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_TriangleStroke">
        <h2 style="margin-bottom: 8px;">Draw.TriangleStroke</h2>
        <code>Draw.TriangleStroke(x1, y1, x2, y2, x3, y3)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a triangle outline.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of the first vertex.</li>
        <li>y1 (Number): Y position of the first vertex.</li>
        <li>x2 (Number): X position of the second vertex.</li>
        <li>y2 (Number): Y position of the second vertex.</li>
        <li>x3 (Number): X position of the third vertex.</li>
        <li>y3 (Number): Y position of the third vertex.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_RectangleStroke">
        <h2 style="margin-bottom: 8px;">Draw.RectangleStroke</h2>
        <code>Draw.RectangleStroke(x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Draws a rectangle outline.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position of where to draw the rectangle.</li>
        <li>y (Number): Y position of where to draw the rectangle.</li>
        <li>width (Number): Width to draw the rectangle at.</li>
        <li>height (Number): Height to draw the rectangle at.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_UseFillSmoothing">
        <h2 style="margin-bottom: 8px;">Draw.UseFillSmoothing</h2>
        <code>Draw.UseFillSmoothing(smoothFill)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets whether or not to use smoothing when drawing filled shapes. (hardware-renderer only)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>smoothFill (Boolean): Whether or not to use smoothing.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_UseStrokeSmoothing">
        <h2 style="margin-bottom: 8px;">Draw.UseStrokeSmoothing</h2>
        <code>Draw.UseStrokeSmoothing(smoothFill)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets whether or not to use smoothing when drawing un-filled shapes. (hardware-renderer only)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>smoothFill (Boolean): Whether or not to use smoothing.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_SetClip">
        <h2 style="margin-bottom: 8px;">Draw.SetClip</h2>
        <code>Draw.SetClip(x, y, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the region in which drawing will occur.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position of where to start the draw region.</li>
        <li>y (Number): Y position of where to start the draw region.</li>
        <li>width (Number): Width of the draw region.</li>
        <li>height (Number): Height of the draw region.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Draw_ClearClip">
        <h2 style="margin-bottom: 8px;">Draw.ClearClip</h2>
        <code>Draw.ClearClip()</code>
        <div style="margin-top: 8px; font-size: 14px;">Resets the drawing region.</div>
        </p>
        <hr/>
        <p id="Reference_Draw_Save">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Save</h2>
        <code>Draw.Save()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_Scale">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Scale</h2>
        <code>Draw.Scale()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_Rotate">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Rotate</h2>
        <code>Draw.Rotate()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_Restore">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Restore</h2>
        <code>Draw.Restore()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_Translate">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Translate</h2>
        <code>Draw.Translate()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_SetTextureTarget">
        <h2 style="margin-bottom: 8px; color: red;">Draw.SetTextureTarget</h2>
        <code>Draw.SetTextureTarget()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_Clear">
        <h2 style="margin-bottom: 8px; color: red;">Draw.Clear</h2>
        <code>Draw.Clear()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Draw_ResetTextureTarget">
        <h2 style="margin-bottom: 8px; color: red;">Draw.ResetTextureTarget</h2>
        <code>Draw.ResetTextureTarget()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Ease_InSine">
        <h2 style="margin-bottom: 8px;">Ease.InSine</h2>
        <code>Ease.InSine(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InSine" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutSine">
        <h2 style="margin-bottom: 8px;">Ease.OutSine</h2>
        <code>Ease.OutSine(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutSine" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutSine">
        <h2 style="margin-bottom: 8px;">Ease.InOutSine</h2>
        <code>Ease.InOutSine(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutSine" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InQuad">
        <h2 style="margin-bottom: 8px;">Ease.InQuad</h2>
        <code>Ease.InQuad(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InQuad" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutQuad">
        <h2 style="margin-bottom: 8px;">Ease.OutQuad</h2>
        <code>Ease.OutQuad(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutQuad" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutQuad">
        <h2 style="margin-bottom: 8px;">Ease.InOutQuad</h2>
        <code>Ease.InOutQuad(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutQuad" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InCubic">
        <h2 style="margin-bottom: 8px;">Ease.InCubic</h2>
        <code>Ease.InCubic(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InCubic" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutCubic">
        <h2 style="margin-bottom: 8px;">Ease.OutCubic</h2>
        <code>Ease.OutCubic(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutCubic" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutCubic">
        <h2 style="margin-bottom: 8px;">Ease.InOutCubic</h2>
        <code>Ease.InOutCubic(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutCubic" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InQuart">
        <h2 style="margin-bottom: 8px;">Ease.InQuart</h2>
        <code>Ease.InQuart(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InQuart" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutQuart">
        <h2 style="margin-bottom: 8px;">Ease.OutQuart</h2>
        <code>Ease.OutQuart(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutQuart" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutQuart">
        <h2 style="margin-bottom: 8px;">Ease.InOutQuart</h2>
        <code>Ease.InOutQuart(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutQuart" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InQuint">
        <h2 style="margin-bottom: 8px;">Ease.InQuint</h2>
        <code>Ease.InQuint(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InQuint" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutQuint">
        <h2 style="margin-bottom: 8px;">Ease.OutQuint</h2>
        <code>Ease.OutQuint(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutQuint" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutQuint">
        <h2 style="margin-bottom: 8px;">Ease.InOutQuint</h2>
        <code>Ease.InOutQuint(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutQuint" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InExpo">
        <h2 style="margin-bottom: 8px;">Ease.InExpo</h2>
        <code>Ease.InExpo(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InExpo" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutExpo">
        <h2 style="margin-bottom: 8px;">Ease.OutExpo</h2>
        <code>Ease.OutExpo(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutExpo" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutExpo">
        <h2 style="margin-bottom: 8px;">Ease.InOutExpo</h2>
        <code>Ease.InOutExpo(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutExpo" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InCirc">
        <h2 style="margin-bottom: 8px;">Ease.InCirc</h2>
        <code>Ease.InCirc(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InCirc" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutCirc">
        <h2 style="margin-bottom: 8px;">Ease.OutCirc</h2>
        <code>Ease.OutCirc(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutCirc" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutCirc">
        <h2 style="margin-bottom: 8px;">Ease.InOutCirc</h2>
        <code>Ease.InOutCirc(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutCirc" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InBack">
        <h2 style="margin-bottom: 8px;">Ease.InBack</h2>
        <code>Ease.InBack(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InBack" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutBack">
        <h2 style="margin-bottom: 8px;">Ease.OutBack</h2>
        <code>Ease.OutBack(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutBack" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutBack">
        <h2 style="margin-bottom: 8px;">Ease.InOutBack</h2>
        <code>Ease.InOutBack(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutBack" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InElastic">
        <h2 style="margin-bottom: 8px;">Ease.InElastic</h2>
        <code>Ease.InElastic(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InElastic" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutElastic">
        <h2 style="margin-bottom: 8px;">Ease.OutElastic</h2>
        <code>Ease.OutElastic(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutElastic" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutElastic">
        <h2 style="margin-bottom: 8px;">Ease.InOutElastic</h2>
        <code>Ease.InOutElastic(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutElastic" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InBounce">
        <h2 style="margin-bottom: 8px;">Ease.InBounce</h2>
        <code>Ease.InBounce(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InBounce" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_OutBounce">
        <h2 style="margin-bottom: 8px;">Ease.OutBounce</h2>
        <code>Ease.OutBounce(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "OutBounce" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_InOutBounce">
        <h2 style="margin-bottom: 8px;">Ease.InOutBounce</h2>
        <code>Ease.InOutBounce(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "InOutBounce" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_Ease_Triangle">
        <h2 style="margin-bottom: 8px;">Ease.Triangle</h2>
        <code>Ease.Triangle(value)</code>
        <div style="margin-top: 8px; font-size: 14px;">Eases the value using the "Triangle" formula.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>value (Number): Percent value. (0.0 - 1.0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Eased Number value between 0.0 and 1.0.</div>
        </p>
        <hr/>
        <p id="Reference_File_Exists">
        <h2 style="margin-bottom: 8px;">File.Exists</h2>
        <code>File.Exists(path)</code>
        <div style="margin-top: 8px; font-size: 14px;">Determines if the file at the path exists.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>path (String): The path of the file to check for existence.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns 1 if the file exists, 0 if otherwise</div>
        </p>
        <hr/>
        <p id="Reference_File_ReadAllText">
        <h2 style="margin-bottom: 8px;">File.ReadAllText</h2>
        <code>File.ReadAllText(path)</code>
        <div style="margin-top: 8px; font-size: 14px;">Reads all text from the given filename.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>path (String): The path of the file to read.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns all the text in the file as a String value if it can be read, otherwise it returns a <code>null</code> value if it cannot be read.</div>
        </p>
        <hr/>
        <p id="Reference_File_WriteAllText">
        <h2 style="margin-bottom: 8px;">File.WriteAllText</h2>
        <code>File.WriteAllText(path, text)</code>
        <div style="margin-top: 8px; font-size: 14px;">Writes all text to the given filename.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>path (String): The path of the file to read.</li>
        <li>text (String): The text to write to the file.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns <code>true</code> if successful, <code>false</code> if otherwise.</div>
        </p>
        <hr/>
        <p id="Reference_HTTP_GetString">
        <h2 style="margin-bottom: 8px; color: red;">HTTP.GetString</h2>
        <code>HTTP.GetString()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_HTTP_GetToFile">
        <h2 style="margin-bottom: 8px; color: red;">HTTP.GetToFile</h2>
        <code>HTTP.GetToFile()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Input_GetMouseX">
        <h2 style="margin-bottom: 8px;">Input.GetMouseX</h2>
        <code>Input.GetMouseX()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets cursor's X position.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns cursor's X position in relation to the window.</div>
        </p>
        <hr/>
        <p id="Reference_Input_GetMouseY">
        <h2 style="margin-bottom: 8px;">Input.GetMouseY</h2>
        <code>Input.GetMouseY()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets cursor's Y position.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns cursor's Y position in relation to the window.</div>
        </p>
        <hr/>
        <p id="Reference_Input_IsMouseButtonDown">
        <h2 style="margin-bottom: 8px;">Input.IsMouseButtonDown</h2>
        <code>Input.IsMouseButtonDown(mouseButtonID)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the mouse button is currently down.<br/></br>Mouse Button Indexes:<ul><li><code>0</code>: Left</li><li><code>1</code>: Middle</li><li><code>2</code>: Right</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>mouseButtonID (Integer): Index of the mouse button to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the mouse button is currently down.</div>
        </p>
        <hr/>
        <p id="Reference_Input_IsMouseButtonPressed">
        <h2 style="margin-bottom: 8px;">Input.IsMouseButtonPressed</h2>
        <code>Input.IsMouseButtonPressed(mouseButtonID)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the mouse button started pressing during the current frame.<br/></br>Mouse Button Indexes:<ul><li><code>0</code>: Left</li><li><code>1</code>: Middle</li><li><code>2</code>: Right</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>mouseButtonID (Integer): Index of the mouse button to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the mouse button started pressing during the current frame.</div>
        </p>
        <hr/>
        <p id="Reference_Input_IsMouseButtonReleased">
        <h2 style="margin-bottom: 8px;">Input.IsMouseButtonReleased</h2>
        <code>Input.IsMouseButtonReleased(mouseButtonID)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the mouse button released during the current frame.<br/></br>Mouse Button Indexes:<ul><li><code>0</code>: Left</li><li><code>1</code>: Middle</li><li><code>2</code>: Right</li></ul></div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>mouseButtonID (Integer): Index of the mouse button to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the mouse button released during the current frame.</div>
        </p>
        <hr/>
        <p id="Reference_Input_IsKeyDown">
        <h2 style="margin-bottom: 8px;">Input.IsKeyDown</h2>
        <code>Input.IsKeyDown(keyID)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the key is currently down.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>keyID (Integer): Index of the key to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the key is currently down.</div>
        </p>
        <hr/>
        <p id="Reference_Input_IsKeyPressed">
        <h2 style="margin-bottom: 8px;">Input.IsKeyPressed</h2>
        <code>Input.IsKeyPressed(mouseButtonID)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the key started pressing during the current frame.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>mouseButtonID (Integer): Index of the key to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the key started pressing during the current frame.</div>
        </p>
        <hr/>
        <p id="Reference_Input_IsKeyReleased">
        <h2 style="margin-bottom: 8px;">Input.IsKeyReleased</h2>
        <code>Input.IsKeyReleased(mouseButtonID)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the key released during the current frame.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>mouseButtonID (Integer): Index of the key to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the key released during the current frame.</div>
        </p>
        <hr/>
        <p id="Reference_Input_GetControllerAttached">
        <h2 style="margin-bottom: 8px;">Input.GetControllerAttached</h2>
        <code>Input.GetControllerAttached(controllerIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the controller at the index is attached.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>controllerIndex (Integer): Index of the controller to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the controller at the index is attached.</div>
        </p>
        <hr/>
        <p id="Reference_Input_GetControllerHat">
        <h2 style="margin-bottom: 8px;">Input.GetControllerHat</h2>
        <code>Input.GetControllerHat(controllerIndex, hatIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the hat value from the controller at the index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>controllerIndex (Integer): Index of the controller to check.</li>
        <li>hatIndex (Integer): Index of the hat to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the hat value from the controller at the index.</div>
        </p>
        <hr/>
        <p id="Reference_Input_GetControllerAxis">
        <h2 style="margin-bottom: 8px;">Input.GetControllerAxis</h2>
        <code>Input.GetControllerAxis(controllerIndex, axisIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the axis value from the controller at the index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>controllerIndex (Integer): Index of the controller to check.</li>
        <li>axisIndex (Integer): Index of the axis to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the axis value from the controller at the index.</div>
        </p>
        <hr/>
        <p id="Reference_Input_GetControllerButton">
        <h2 style="margin-bottom: 8px;">Input.GetControllerButton</h2>
        <code>Input.GetControllerButton(controllerIndex, buttonIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the button value from the controller at the index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>controllerIndex (Integer): Index of the controller to check.</li>
        <li>buttonIndex (Integer): Index of the button to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the button value from the controller at the index.</div>
        </p>
        <hr/>
        <p id="Reference_Input_GetControllerName">
        <h2 style="margin-bottom: 8px;">Input.GetControllerName</h2>
        <code>Input.GetControllerName(controllerIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the name of the controller at the index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>controllerIndex (Integer): Index of the controller to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the name of the controller at the index.</div>
        </p>
        <hr/>
        <p id="Reference_Instance_Create">
        <h2 style="margin-bottom: 8px;">Instance.Create</h2>
        <code>Instance.Create(className, x, y[, flag])</code>
        <div style="margin-top: 8px; font-size: 14px;">Creates a new instance of an object class and calls it's <code>Create</code> event with the flag.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>className (String): Name of the object class.</li>
        <li>x (Number): X position of where to place the new instance.</li>
        <li>y (Number): Y position of where to place the new instance.</li>
        <li>flag (Integer): Integer value to pass to the <code>Create</code> event. (Default: 0)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the new instance.</div>
        </p>
        <hr/>
        <p id="Reference_Instance_GetNth">
        <h2 style="margin-bottom: 8px;">Instance.GetNth</h2>
        <code>Instance.GetNth(className, n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the n'th instance of an object class.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>className (String): Name of the object class.</li>
        <li>n (Integer): n'th of object class' instances to get. <code>0</code> is first.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns n'th of object class' instances, <code>null</code> if instance cannot be found or class does not exist.</div>
        </p>
        <hr/>
        <p id="Reference_Instance_IsClass">
        <h2 style="margin-bottom: 8px;">Instance.IsClass</h2>
        <code>Instance.IsClass(instance, className)</code>
        <div style="margin-top: 8px; font-size: 14px;">Determines whether or not the instance is of a specified object class.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>instance (Instance): The instance to check.</li>
        <li>className (String): Name of the object class.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether or not the instance is of a specified object class.</div>
        </p>
        <hr/>
        <p id="Reference_Instance_GetCount">
        <h2 style="margin-bottom: 8px;">Instance.GetCount</h2>
        <code>Instance.GetCount(className)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets amount of currently active instances in an object class.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>className (String): Name of the object class.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns count of currently active instances in an object class.</div>
        </p>
        <hr/>
        <p id="Reference_Instance_GetNextInstance">
        <h2 style="margin-bottom: 8px;">Instance.GetNextInstance</h2>
        <code>Instance.GetNextInstance(instance, n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the instance created after or before the specified instance. <code>0</code> is the next instance, <code>-1</code> is the previous instance.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>instance (Instance): The instance to check.</li>
        <li>n (Integer): How many instances after or before the desired instance is to the checking instance.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the desired instance.</div>
        </p>
        <hr/>
        <p id="Reference_JSON_Parse">
        <h2 style="margin-bottom: 8px;">JSON.Parse</h2>
        <code>JSON.Parse(jsonText)</code>
        <div style="margin-top: 8px; font-size: 14px;">Decodes a String value into a Map value.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>jsonText (String): JSON-compliant text.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Map value if the text can be decoded, otherwise returns <code>null</code>.</div>
        </p>
        <hr/>
        <p id="Reference_JSON_ToString">
        <h2 style="margin-bottom: 8px;">JSON.ToString</h2>
        <code>JSON.ToString(json, prettyPrint)</code>
        <div style="margin-top: 8px; font-size: 14px;">Converts a Map value into a String value.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>json (Map): Map value.</li>
        <li>prettyPrint (Boolean): Whether or not to use spacing and newlines in the text.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a JSON string based on the Map value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Cos">
        <h2 style="margin-bottom: 8px;">Math.Cos</h2>
        <code>Math.Cos(x)</code>
        <div style="margin-top: 8px; font-size: 14px;">Returns the cosine of an angle of x radians.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Decimal): Angle (in radians) to get the cosine of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">The cosine of x radians.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Sin">
        <h2 style="margin-bottom: 8px;">Math.Sin</h2>
        <code>Math.Sin(x)</code>
        <div style="margin-top: 8px; font-size: 14px;">Returns the sine of an angle of x radians.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Decimal): Angle (in radians) to get the sine of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">The sine of x radians.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Tan">
        <h2 style="margin-bottom: 8px;">Math.Tan</h2>
        <code>Math.Tan(x)</code>
        <div style="margin-top: 8px; font-size: 14px;">Returns the tangent of an angle of x radians.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Decimal): Angle (in radians) to get the tangent of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">The tangent of x radians.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Acos">
        <h2 style="margin-bottom: 8px;">Math.Acos</h2>
        <code>Math.Acos(x)</code>
        <div style="margin-top: 8px; font-size: 14px;">Returns the arccosine of x.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Decimal): Number value to get the arccosine of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the angle (in radians) as a Decimal value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Asin">
        <h2 style="margin-bottom: 8px;">Math.Asin</h2>
        <code>Math.Asin(x)</code>
        <div style="margin-top: 8px; font-size: 14px;">Returns the arcsine of x.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Decimal): Number value to get the arcsine of.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the angle (in radians) as a Decimal value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Atan">
        <h2 style="margin-bottom: 8px;">Math.Atan</h2>
        <code>Math.Atan(x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Returns the arctangent angle (in radians) from x and y.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Decimal): x value.</li>
        <li>y (Decimal): y value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">The angle from x and y.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Distance">
        <h2 style="margin-bottom: 8px;">Math.Distance</h2>
        <code>Math.Distance(x1, y1, x2, y2)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the distance from (x1,y1) to (x2,y2) in pixels.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of first point.</li>
        <li>y1 (Number): Y position of first point.</li>
        <li>x2 (Number): X position of second point.</li>
        <li>y2 (Number): Y position of second point.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the distance from (x1,y1) to (x2,y2) as a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Direction">
        <h2 style="margin-bottom: 8px;">Math.Direction</h2>
        <code>Math.Direction(x1, y1, x2, y2)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the angle from (x1,y1) to (x2,y2) in radians.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x1 (Number): X position of first point.</li>
        <li>y1 (Number): Y position of first point.</li>
        <li>x2 (Number): X position of second point.</li>
        <li>y2 (Number): Y position of second point.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the angle from (x1,y1) to (x2,y2) as a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Abs">
        <h2 style="margin-bottom: 8px;">Math.Abs</h2>
        <code>Math.Abs(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the absolute value of a Number.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the absolute value of n.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Min">
        <h2 style="margin-bottom: 8px;">Math.Min</h2>
        <code>Math.Min(a, b)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the lesser value of two Number values.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>a (Number): Number value.</li>
        <li>b (Number): Number value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the lesser value of a and b.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Max">
        <h2 style="margin-bottom: 8px;">Math.Max</h2>
        <code>Math.Max(a, b)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the greater value of two Number values.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>a (Number): Number value.</li>
        <li>b (Number): Number value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the greater value of a and b.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Clamp">
        <h2 style="margin-bottom: 8px;">Math.Clamp</h2>
        <code>Math.Clamp(n, minValue, maxValue)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the value clamped between a range.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number value.</li>
        <li>minValue (Number): Minimum range value to clamp to.</li>
        <li>maxValue (Number): Maximum range value to clamp to.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the Number value if within the range, otherwise returns closest range value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Sign">
        <h2 style="margin-bottom: 8px;">Math.Sign</h2>
        <code>Math.Sign(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the sign associated with a Number value.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns <code>-1</code> if <code>n</code> is negative, <code>1</code> if positive, and <code>0</code> if otherwise.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Random">
        <h2 style="margin-bottom: 8px;">Math.Random</h2>
        <code>Math.Random()</code>
        <div style="margin-top: 8px; font-size: 14px;">Get a random number between 0.0 and 1.0.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the random number.</div>
        </p>
        <hr/>
        <p id="Reference_Math_RandomMax">
        <h2 style="margin-bottom: 8px;">Math.RandomMax</h2>
        <code>Math.RandomMax(max)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets a random number between 0.0 and a specified maximum.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>max (Number): Maximum non-inclusive value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the random number.</div>
        </p>
        <hr/>
        <p id="Reference_Math_RandomRange">
        <h2 style="margin-bottom: 8px;">Math.RandomRange</h2>
        <code>Math.RandomRange(min, max)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets a random number between specified minimum and a specified maximum.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>min (Number): Minimum non-inclusive value.</li>
        <li>max (Number): Maximum non-inclusive value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the random number.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Floor">
        <h2 style="margin-bottom: 8px;">Math.Floor</h2>
        <code>Math.Floor(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Rounds the number n downward, returning the largest integral value that is not greater than n.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number to be rounded.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the floored number value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Ceil">
        <h2 style="margin-bottom: 8px;">Math.Ceil</h2>
        <code>Math.Ceil(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Rounds the number n upward, returning the smallest integral value that is not less than n.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number to be rounded.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the ceiling-ed number value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Round">
        <h2 style="margin-bottom: 8px;">Math.Round</h2>
        <code>Math.Round(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Rounds the number n.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number to be rounded.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the rounded number value.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Sqrt">
        <h2 style="margin-bottom: 8px;">Math.Sqrt</h2>
        <code>Math.Sqrt(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Retrieves the square root of the number n.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number to be square rooted.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the square root of the number n.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Pow">
        <h2 style="margin-bottom: 8px;">Math.Pow</h2>
        <code>Math.Pow(n, p)</code>
        <div style="margin-top: 8px; font-size: 14px;">Retrieves the number n to the power of p.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number for the base of the exponent.</li>
        <li>p (Number): Exponent.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the number n to the power of p.</div>
        </p>
        <hr/>
        <p id="Reference_Math_Exp">
        <h2 style="margin-bottom: 8px;">Math.Exp</h2>
        <code>Math.Exp(p)</code>
        <div style="margin-top: 8px; font-size: 14px;">Retrieves the constant e (2.717) to the power of p.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>p (Number): Exponent.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the result number.</div>
        </p>
        <hr/>
        <p id="Reference_Matrix_Create">
        <h2 style="margin-bottom: 8px;">Matrix.Create</h2>
        <code>Matrix.Create()</code>
        <div style="margin-top: 8px; font-size: 14px;">Creates a 4x4 matrix and sets it to the identity. <br/>"The model, view and projection matrices are three separate matrices. <br/>Model maps from an object's local coordinate space into world space, <br/>view from world space to camera space, projection from camera to screen.<br/><br/>If you compose all three, you can use the one result to map all the way from <br/>object space to screen space, making you able to work out what you need to <br/>pass on to the next stage of a programmable pipeline from the incoming <br/>vertex positions." - Tommy (https://stackoverflow.com/questions/5550620/the-purpose-of-model-view-projection-matrix)</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the Matrix as an Array.</div>
        </p>
        <hr/>
        <p id="Reference_Matrix_Identity">
        <h2 style="margin-bottom: 8px;">Matrix.Identity</h2>
        <code>Matrix.Identity(matrix)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the matrix to the identity.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>matrix (Matrix): The matrix to set to the identity.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Matrix_Copy">
        <h2 style="margin-bottom: 8px;">Matrix.Copy</h2>
        <code>Matrix.Copy(matrixDestination, matrixSource)</code>
        <div style="margin-top: 8px; font-size: 14px;">Copies the matrix to the destination.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>matrixDestination (Matrix): Destination.</li>
        <li>matrixSource (Matrix): Source.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Matrix_Multiply">
        <h2 style="margin-bottom: 8px;">Matrix.Multiply</h2>
        <code>Matrix.Multiply(matrix, a, b)</code>
        <div style="margin-top: 8px; font-size: 14px;">Multiplies two matrices.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>matrix (Matrix): The matrix to output the values to.</li>
        <li>a (Matrix): The first matrix to use for multiplying.</li>
        <li>b (Matrix): The second matrix to use for multiplying.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Matrix_Translate">
        <h2 style="margin-bottom: 8px;">Matrix.Translate</h2>
        <code>Matrix.Translate(matrix, x, y, z[, resetToIdentity])</code>
        <div style="margin-top: 8px; font-size: 14px;">Translates the matrix.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>matrix (Matrix): The matrix to output the values to.</li>
        <li>x (Number): X position value.</li>
        <li>y (Number): Y position value.</li>
        <li>z (Number): Z position value.</li>
        <li>resetToIdentity (Boolean): Whether or not to calculate the translation values based on the matrix. (Default: <code>false</code>)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Matrix_Scale">
        <h2 style="margin-bottom: 8px;">Matrix.Scale</h2>
        <code>Matrix.Scale(matrix, x, y, z)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the matrix to a scale identity.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>matrix (Matrix): The matrix to output the values to.</li>
        <li>x (Number): X scale value.</li>
        <li>y (Number): Y scale value.</li>
        <li>z (Number): Z scale value.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Matrix_Rotate">
        <h2 style="margin-bottom: 8px;">Matrix.Rotate</h2>
        <code>Matrix.Rotate(matrix, x, y, z)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the matrix to a rotation identity.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>matrix (Matrix): The matrix to output the values to.</li>
        <li>x (Number): X rotation value.</li>
        <li>y (Number): Y rotation value.</li>
        <li>z (Number): Z rotation value.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Music_Play">
        <h2 style="margin-bottom: 8px;">Music.Play</h2>
        <code>Music.Play(music)</code>
        <div style="margin-top: 8px; font-size: 14px;">Places the music onto the music stack and plays it.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>music (Integer): The music index to play.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Music_Stop">
        <h2 style="margin-bottom: 8px;">Music.Stop</h2>
        <code>Music.Stop(music)</code>
        <div style="margin-top: 8px; font-size: 14px;">Removes the music from the music stack, stopping it if currently playing.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>music (Integer): The music index to play.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Music_StopWithFadeOut">
        <h2 style="margin-bottom: 8px;">Music.StopWithFadeOut</h2>
        <code>Music.StopWithFadeOut()</code>
        <div style="margin-top: 8px; font-size: 14px;">Removes the music at the top of the music stack, fading it out over a time period.</div>
        </p>
        <hr/>
        <p id="Reference_Music_Pause">
        <h2 style="margin-bottom: 8px;">Music.Pause</h2>
        <code>Music.Pause()</code>
        <div style="margin-top: 8px; font-size: 14px;">Pauses the music at the top of the music stack.</div>
        </p>
        <hr/>
        <p id="Reference_Music_Resume">
        <h2 style="margin-bottom: 8px;">Music.Resume</h2>
        <code>Music.Resume()</code>
        <div style="margin-top: 8px; font-size: 14px;">Resumes the music at the top of the music stack.</div>
        </p>
        <hr/>
        <p id="Reference_Music_Clear">
        <h2 style="margin-bottom: 8px;">Music.Clear</h2>
        <code>Music.Clear()</code>
        <div style="margin-top: 8px; font-size: 14px;">Completely clears the music stack, stopping all music.</div>
        </p>
        <hr/>
        <p id="Reference_Music_Loop">
        <h2 style="margin-bottom: 8px;">Music.Loop</h2>
        <code>Music.Loop(music, loop, loopPoint)</code>
        <div style="margin-top: 8px; font-size: 14px;">Places the music onto the music stack and plays it, looping back to the specified sample index if it reaches the end of playback.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>music (Integer): The music index to play.</li>
        <li>loop (Boolean): Unused.</li>
        <li>loopPoint (Integer): The sample index to loop back to.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Music_IsPlaying">
        <h2 style="margin-bottom: 8px;">Music.IsPlaying</h2>
        <code>Music.IsPlaying(music)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks to see if the specified music is currently playing.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>music (Integer): The music index to play.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether or not the music is playing.</div>
        </p>
        <hr/>
        <p id="Reference_Number_ToString">
        <h2 style="margin-bottom: 8px;">Number.ToString</h2>
        <code>Number.ToString(n[, base])</code>
        <div style="margin-top: 8px; font-size: 14px;">Converts a Number to a String.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number value.</li>
        <li>base (Integer): radix</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Number_AsInteger">
        <h2 style="margin-bottom: 8px;">Number.AsInteger</h2>
        <code>Number.AsInteger(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Converts a Decimal to an Integer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an Integer value.</div>
        </p>
        <hr/>
        <p id="Reference_Number_AsDecimal">
        <h2 style="margin-bottom: 8px;">Number.AsDecimal</h2>
        <code>Number.AsDecimal(n)</code>
        <div style="margin-top: 8px; font-size: 14px;">Converts a Integer to an Decimal.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>n (Number): Number value.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an Decimal value.</div>
        </p>
        <hr/>
        <p id="Reference_Palette_EnablePaletteUsage">
        <h2 style="margin-bottom: 8px;">Palette.EnablePaletteUsage</h2>
        <code>Palette.EnablePaletteUsage(usePalettes)</code>
        <div style="margin-top: 8px; font-size: 14px;">Enables or disables palette usage for the application.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>usePalettes (Boolean): Whether or not to use palettes.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_LoadFromFile">
        <h2 style="margin-bottom: 8px;">Palette.LoadFromFile</h2>
        <code>Palette.LoadFromFile(paletteIndex, filename)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads palette from an .act, .col, .gif, or .hpal file.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette to load to.</li>
        <li>filename (String): Filepath of file.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_LoadFromResource">
        <h2 style="margin-bottom: 8px;">Palette.LoadFromResource</h2>
        <code>Palette.LoadFromResource(paletteIndex, filename)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads palette from an .act, .col, .gif, or .hpal resource.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette to load to.</li>
        <li>filename (String): Filepath of resource.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_GetColor">
        <h2 style="margin-bottom: 8px;">Palette.GetColor</h2>
        <code>Palette.GetColor(paletteIndex, colorIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets a color from the specified palette.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette.</li>
        <li>colorIndex (Integer): Index of color.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_SetColor">
        <h2 style="margin-bottom: 8px;">Palette.SetColor</h2>
        <code>Palette.SetColor(paletteIndex, colorIndex, hex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets a color on the specified palette, format 0xRRGGBB.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette.</li>
        <li>colorIndex (Integer): Index of color.</li>
        <li>hex (Integer): Hexadecimal color value to set the color to. (format: 0xRRGGBB)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_MixPalettes">
        <h2 style="margin-bottom: 8px;">Palette.MixPalettes</h2>
        <code>Palette.MixPalettes(destinationPaletteIndex, paletteIndexA, paletteIndexB, mixRatio, colorIndexStart, colorCount)</code>
        <div style="margin-top: 8px; font-size: 14px;">Mixes colors between two palettes and outputs to another palette.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>destinationPaletteIndex (Integer): Index of palette to put colors to.</li>
        <li>paletteIndexA (Integer): First index of palette.</li>
        <li>paletteIndexB (Integer): Second index of palette.</li>
        <li>mixRatio (Number): Percentage to mix the colors between 0.0 - 1.0.</li>
        <li>colorIndexStart (Integer): First index of colors to mix.</li>
        <li>colorCount (Integer): Amount of colors to mix.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_RotateColorsLeft">
        <h2 style="margin-bottom: 8px;">Palette.RotateColorsLeft</h2>
        <code>Palette.RotateColorsLeft(paletteIndex, colorIndexStart, colorCount)</code>
        <div style="margin-top: 8px; font-size: 14px;">Shifts the colors on the palette to the left.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette.</li>
        <li>colorIndexStart (Integer): First index of colors to shift.</li>
        <li>colorCount (Integer): Amount of colors to shift.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_RotateColorsRight">
        <h2 style="margin-bottom: 8px;">Palette.RotateColorsRight</h2>
        <code>Palette.RotateColorsRight(paletteIndex, colorIndexStart, colorCount)</code>
        <div style="margin-top: 8px; font-size: 14px;">Shifts the colors on the palette to the right.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette.</li>
        <li>colorIndexStart (Integer): First index of colors to shift.</li>
        <li>colorCount (Integer): Amount of colors to shift.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_CopyColors">
        <h2 style="margin-bottom: 8px;">Palette.CopyColors</h2>
        <code>Palette.CopyColors(paletteIndexA, colorIndexStartA, paletteIndexB, colorIndexStartB, colorCount)</code>
        <div style="margin-top: 8px; font-size: 14px;">Copies colors from Palette A to Palette B</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndexA (Integer): Index of palette to get colors from.</li>
        <li>colorIndexStartA (Integer): First index of colors to copy.</li>
        <li>paletteIndexB (Integer): Index of palette to put colors to.</li>
        <li>colorIndexStartB (Integer): First index of colors to be placed.</li>
        <li>colorCount (Integer): Amount of colors to be copied.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Palette_SetPaletteIndexLines">
        <h2 style="margin-bottom: 8px;">Palette.SetPaletteIndexLines</h2>
        <code>Palette.SetPaletteIndexLines(paletteIndex, lineStart, lineEnd)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the palette to be used for drawing, on certain Y-positions on the screen (between the start and end lines).</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>paletteIndex (Integer): Index of palette.</li>
        <li>lineStart (Integer): Start line to set to the palette.</li>
        <li>lineEnd (Integer): Line where to stop setting the palette.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadSprite">
        <h2 style="margin-bottom: 8px;">Resources.LoadSprite</h2>
        <code>Resources.LoadSprite(filename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads a Sprite resource, returning its Sprite index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): Filename of the resource.</li>
        <li>unloadPolicy (Integer): Whether or not to unload the resource at the end of the current Scene, or the game end.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the index of the Resource.</div>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadImage">
        <h2 style="margin-bottom: 8px;">Resources.LoadImage</h2>
        <code>Resources.LoadImage(filename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads an Image resource, returning its Image index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): Filename of the resource.</li>
        <li>unloadPolicy (Integer): Whether or not to unload the resource at the end of the current Scene, or the game end.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the index of the Resource.</div>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadFont">
        <h2 style="margin-bottom: 8px;">Resources.LoadFont</h2>
        <code>Resources.LoadFont(filename, pixelSize, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads a Font resource, returning its Font index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String):</li>
        <li>pixelSize (Number):</li>
        <li>unloadPolicy (Integer):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadShader">
        <h2 style="margin-bottom: 8px;">Resources.LoadShader</h2>
        <code>Resources.LoadShader(vertexShaderFilename, fragmentShaderFilename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Please do not use this</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>vertexShaderFilename (String):</li>
        <li>fragmentShaderFilename (String):</li>
        <li>unloadPolicy (Integer):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadModel">
        <h2 style="margin-bottom: 8px;">Resources.LoadModel</h2>
        <code>Resources.LoadModel(filename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Doesn't work yet</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String):</li>
        <li>unloadPolicy (Integer):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadMusic">
        <h2 style="margin-bottom: 8px;">Resources.LoadMusic</h2>
        <code>Resources.LoadMusic(filename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads a Music resource, returning its Music index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): Filename of the resource.</li>
        <li>unloadPolicy (Integer): Whether or not to unload the resource at the end of the current Scene, or the game end.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the index of the Resource.</div>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadSound">
        <h2 style="margin-bottom: 8px;">Resources.LoadSound</h2>
        <code>Resources.LoadSound(filename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads a Sound resource, returning its Sound index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): Filename of the resource.</li>
        <li>unloadPolicy (Integer): Whether or not to unload the resource at the end of the current Scene, or the game end.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the index of the Resource.</div>
        </p>
        <hr/>
        <p id="Reference_Resources_LoadVideo">
        <h2 style="margin-bottom: 8px;">Resources.LoadVideo</h2>
        <code>Resources.LoadVideo(filename, unloadPolicy)</code>
        <div style="margin-top: 8px; font-size: 14px;">Loads a Video resource, returning its Video index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String):</li>
        <li>unloadPolicy (Integer):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Resources_FileExists">
        <h2 style="margin-bottom: 8px;">Resources.FileExists</h2>
        <code>Resources.FileExists(filename)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks to see if a Resource exists with the given filename.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): The given filename.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns <code>true</code> if the Resource exists, <code>false</code> if otherwise.</div>
        </p>
        <hr/>
        <p id="Reference_Resources_ReadAllText">
        <h2 style="margin-bottom: 8px;">Resources.ReadAllText</h2>
        <code>Resources.ReadAllText(path)</code>
        <div style="margin-top: 8px; font-size: 14px;">Reads all text from the given filename.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>path (String): The path of the resource to read.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns all the text in the resource as a String value if it can be read, otherwise it returns a <code>null</code> value if it cannot be read.</div>
        </p>
        <hr/>
        <p id="Reference_Resources_UnloadImage">
        <h2 style="margin-bottom: 8px; color: red;">Resources.UnloadImage</h2>
        <code>Resources.UnloadImage()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Scene_Load">
        <h2 style="margin-bottom: 8px;">Scene.Load</h2>
        <code>Scene.Load(filename)</code>
        <div style="margin-top: 8px; font-size: 14px;">Changes active scene to the one in the specified resource file.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): Filename of scene.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_LoadTileCollisions">
        <h2 style="margin-bottom: 8px;">Scene.LoadTileCollisions</h2>
        <code>Scene.LoadTileCollisions(filename)</code>
        <div style="margin-top: 8px; font-size: 14px;">Load tile collisions from a resource file.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>filename (String): Filename of tile collision file.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_Restart">
        <h2 style="margin-bottom: 8px;">Scene.Restart</h2>
        <code>Scene.Restart()</code>
        <div style="margin-top: 8px; font-size: 14px;">Restarts the active scene.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetLayerCount">
        <h2 style="margin-bottom: 8px;">Scene.GetLayerCount</h2>
        <code>Scene.GetLayerCount()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the amount of layers in the active scene.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the amount of layers in the active scene.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetLayerIndex">
        <h2 style="margin-bottom: 8px;">Scene.GetLayerIndex</h2>
        <code>Scene.GetLayerIndex(layerName)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the layer index of the layer with the specified name.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerName (String): Name of the layer to find.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the layer index, or <code>-1</code> if the layer could not be found.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetName">
        <h2 style="margin-bottom: 8px;">Scene.GetName</h2>
        <code>Scene.GetName()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the name of the active scene.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the name of the active scene.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetWidth">
        <h2 style="margin-bottom: 8px;">Scene.GetWidth</h2>
        <code>Scene.GetWidth()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the width of the scene in tiles.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the width of the scene in tiles.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetHeight">
        <h2 style="margin-bottom: 8px;">Scene.GetHeight</h2>
        <code>Scene.GetHeight()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the height of the scene in tiles.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the height of the scene in tiles.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetTileSize">
        <h2 style="margin-bottom: 8px;">Scene.GetTileSize</h2>
        <code>Scene.GetTileSize()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the size of tiles.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the size of tiles.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetTileID">
        <h2 style="margin-bottom: 8px;">Scene.GetTileID</h2>
        <code>Scene.GetTileID(layer, x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the tile's index number at the tile coordinates.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layer (Integer): Index of the layer</li>
        <li>x (Number): X position (in tiles) of the tile</li>
        <li>y (Number): Y position (in tiles) of the tile</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the tile's index number.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetTileFlipX">
        <h2 style="margin-bottom: 8px;">Scene.GetTileFlipX</h2>
        <code>Scene.GetTileFlipX(layer, x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the tile at the tile coordinates is flipped horizontally or not.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layer (Integer): Index of the layer</li>
        <li>x (Number): X position (in tiles) of the tile</li>
        <li>y (Number): Y position (in tiles) of the tile</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the tile's horizontally flipped.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_GetTileFlipY">
        <h2 style="margin-bottom: 8px;">Scene.GetTileFlipY</h2>
        <code>Scene.GetTileFlipY(layer, x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the tile at the tile coordinates is flipped vertically or not.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layer (Integer): Index of the layer</li>
        <li>x (Number): X position (in tiles) of the tile</li>
        <li>y (Number): Y position (in tiles) of the tile</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether the tile's vertically flipped.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_SetTile">
        <h2 style="margin-bottom: 8px;">Scene.SetTile</h2>
        <code>Scene.SetTile(layer, cellX, cellY, tileID, flipX, flipY[, collisionMaskA, collisionMaskB])</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the tile at a position.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layer (Integer): Layer index.</li>
        <li>cellX (Number): Tile cell X.</li>
        <li>cellY (Number): Tile cell Y.</li>
        <li>tileID (Integer): Tile ID.</li>
        <li>flipX (Boolean): Whether to flip the tile horizontally or not.</li>
        <li>flipY (Boolean): Whether to flip the tile vertically or not.</li>
        <li>collisionMaskA (Integer): Collision mask to use for the tile on Plane A. (0: No collision, 1: Top-side collision only, 2: Left-right-bottom-side collision only, 3: All-side collision)</li>
        <li>collisionMaskB (Integer): Collision mask to use for the tile on Plane B. (0: No collision, 1: Top-side collision only, 2: Left-right-bottom-side collision only, 3: All-side collision)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetTileCollisionSides">
        <h2 style="margin-bottom: 8px;">Scene.SetTileCollisionSides</h2>
        <code>Scene.SetTileCollisionSides(layer, cellX, cellY, collisionMaskA, collisionMaskB)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the collision of a tile at a position.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layer (Integer): Layer index.</li>
        <li>cellX (Number): Tile cell X.</li>
        <li>cellY (Number): Tile cell Y.</li>
        <li>collisionMaskA (Integer): Collision mask to use for the tile on Plane A. (0: No collision, 1: Top-side collision only, 2: Left-right-bottom-side collision only, 3: All-side collision)</li>
        <li>collisionMaskB (Integer): Collision mask to use for the tile on Plane B. (0: No collision, 1: Top-side collision only, 2: Left-right-bottom-side collision only, 3: All-side collision)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetPaused">
        <h2 style="margin-bottom: 8px;">Scene.SetPaused</h2>
        <code>Scene.SetPaused(isPaused)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets whether the game is paused or not. When paused, only objects with <code>Pauseable</code> set to <code>false</code> will continue to <code>Update</code>.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>isPaused (Boolean): Whether or not the scene is paused.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerVisible">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerVisible</h2>
        <code>Scene.SetLayerVisible(layerIndex, isVisible)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the visibility of the specified layer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>isVisible (Boolean): Whether or not the layer can be seen.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerCollidable">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerCollidable</h2>
        <code>Scene.SetLayerCollidable(layerIndex, isVisible)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets whether or not the specified layer's tiles can be collided with.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>isVisible (Boolean): Whether or not the layer can be collided with.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerInternalSize">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerInternalSize</h2>
        <code>Scene.SetLayerInternalSize()</code>
        <div style="margin-top: 8px; font-size: 14px;">Do not use this.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerOffsetPosition">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerOffsetPosition</h2>
        <code>Scene.SetLayerOffsetPosition(layerIndex, offsetX, offsetY)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the camera offset position of the specified layer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>offsetX (Number): Offset X position.</li>
        <li>offsetY (Number): Offset Y position.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerDrawGroup">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerDrawGroup</h2>
        <code>Scene.SetLayerDrawGroup(layerIndex, drawGroup)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the draw group of the specified layer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>drawGroup (Integer): Number from 0 to 15. (0 = Back, 15 = Front)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerDrawBehavior">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerDrawBehavior</h2>
        <code>Scene.SetLayerDrawBehavior(layerIndex, isVertical)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the parallax direction of the layer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>isVertical (Boolean): Number from 0 to 15. (0 = Back, 15 = Front)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerScroll">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerScroll</h2>
        <code>Scene.SetLayerScroll(layerIndex, relative, constant)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the scroll values of the layer. (Horizontal Parallax = Up/Down values, Vertical Parallax = Left/Right values)</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>relative (Decimal): How much to move the layer relative to the camera. (0.0 = no movement, 1.0 = moves opposite to speed of camera, 2.0 = moves twice the speed opposite to camera)</li>
        <li>constant (Decimal): How many pixels to move the layer per frame.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerSetParallaxLinesBegin">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerSetParallaxLinesBegin</h2>
        <code>Scene.SetLayerSetParallaxLinesBegin(layerIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Begins setup for changing the parallax lines.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerSetParallaxLines">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerSetParallaxLines</h2>
        <code>Scene.SetLayerSetParallaxLines(lineStart, lineEnd, relative, constant, canDeform)</code>
        <div style="margin-top: 8px; font-size: 14px;">Set the parallax lines.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>lineStart (Integer): Start line.</li>
        <li>lineEnd (Integer): End line.</li>
        <li>relative (Number): How much to move the scroll line relative to the camera. (0.0 = no movement, 1.0 = moves opposite to speed of camera, 2.0 = moves twice the speed opposite to camera)</li>
        <li>constant (Number): How many pixels to move the layer per frame.</li>
        <li>canDeform (Boolean): Whether the parallax lines can be deformed.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerSetParallaxLinesEnd">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerSetParallaxLinesEnd</h2>
        <code>Scene.SetLayerSetParallaxLinesEnd()</code>
        <div style="margin-top: 8px; font-size: 14px;">Ends setup for changing the parallax lines and submits the changes.</div>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerTileDeforms">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerTileDeforms</h2>
        <code>Scene.SetLayerTileDeforms(layerIndex, deformIndex, deformA, deformB)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the tile deforms of the layer at the specified index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>deformIndex (Integer): Index of deform value.</li>
        <li>deformA (Number): Deform value above the Deform Split Line.</li>
        <li>deformB (Number): Deform value below the Deform Split Line.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerTileDeformSplitLine">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerTileDeformSplitLine</h2>
        <code>Scene.SetLayerTileDeformSplitLine(layerIndex, deformPosition)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the position of the Deform Split Line.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>deformPosition (Number): The position on screen where the Deform Split Line should be. (Y when horizontal parallax, X when vertical.)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerTileDeformOffsets">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerTileDeformOffsets</h2>
        <code>Scene.SetLayerTileDeformOffsets(layerIndex, deformAOffset, deformBOffset)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the position of the Deform Split Line.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>deformAOffset (Number): Offset for the deforms above the Deform Split Line.</li>
        <li>deformBOffset (Number): Offset for the deforms below the Deform Split Line.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetLayerCustomScanlineFunction">
        <h2 style="margin-bottom: 8px;">Scene.SetLayerCustomScanlineFunction</h2>
        <code>Scene.SetLayerCustomScanlineFunction(layerIndex, function)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the function to be used for generating custom tile scanlines.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>layerIndex (Integer): Index of layer.</li>
        <li>function (Function): Function to be used before tile drawing for generating scanlines. (Use <code>null</code> to reset functionality.)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_SetTileScanline">
        <h2 style="margin-bottom: 8px;">Scene.SetTileScanline</h2>
        <code>Scene.SetTileScanline(scanline, srcX, srcY, deltaX, deltaY)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the tile scanline (for use only inside a Custom Scanline Function).</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>scanline (Integer): Index of scanline to edit.</li>
        <li>srcX (Number):</li>
        <li>srcY (Number):</li>
        <li>deltaX (Number):</li>
        <li>deltaY (Number):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Scene_IsPaused">
        <h2 style="margin-bottom: 8px;">Scene.IsPaused</h2>
        <code>Scene.IsPaused()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether or not the scene is in Paused mode.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns whether or not the scene is in Paused mode.</div>
        </p>
        <hr/>
        <p id="Reference_Shader_Set">
        <h2 style="margin-bottom: 8px; color: red;">Shader.Set</h2>
        <code>Shader.Set()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_GetUniform">
        <h2 style="margin-bottom: 8px; color: red;">Shader.GetUniform</h2>
        <code>Shader.GetUniform()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_SetUniformI">
        <h2 style="margin-bottom: 8px; color: red;">Shader.SetUniformI</h2>
        <code>Shader.SetUniformI()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_SetUniformF">
        <h2 style="margin-bottom: 8px; color: red;">Shader.SetUniformF</h2>
        <code>Shader.SetUniformF()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_SetUniform3x3">
        <h2 style="margin-bottom: 8px; color: red;">Shader.SetUniform3x3</h2>
        <code>Shader.SetUniform3x3()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_SetUniform4x4">
        <h2 style="margin-bottom: 8px; color: red;">Shader.SetUniform4x4</h2>
        <code>Shader.SetUniform4x4()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_SetUniformTexture">
        <h2 style="margin-bottom: 8px; color: red;">Shader.SetUniformTexture</h2>
        <code>Shader.SetUniformTexture()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Shader_Unset">
        <h2 style="margin-bottom: 8px; color: red;">Shader.Unset</h2>
        <code>Shader.Unset()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_Open">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.Open</h2>
        <code>SocketClient.Open()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_Close">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.Close</h2>
        <code>SocketClient.Close()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_IsOpen">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.IsOpen</h2>
        <code>SocketClient.IsOpen()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_Poll">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.Poll</h2>
        <code>SocketClient.Poll()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_BytesToRead">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.BytesToRead</h2>
        <code>SocketClient.BytesToRead()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_ReadDecimal">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.ReadDecimal</h2>
        <code>SocketClient.ReadDecimal()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_ReadInteger">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.ReadInteger</h2>
        <code>SocketClient.ReadInteger()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_ReadString">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.ReadString</h2>
        <code>SocketClient.ReadString()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_WriteDecimal">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.WriteDecimal</h2>
        <code>SocketClient.WriteDecimal()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_WriteInteger">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.WriteInteger</h2>
        <code>SocketClient.WriteInteger()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_SocketClient_WriteString">
        <h2 style="margin-bottom: 8px; color: red;">SocketClient.WriteString</h2>
        <code>SocketClient.WriteString()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Sound_Play">
        <h2 style="margin-bottom: 8px;">Sound.Play</h2>
        <code>Sound.Play(sound)</code>
        <div style="margin-top: 8px; font-size: 14px;">Plays a sound once.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sound (Integer): The sound index to play.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Sound_Loop">
        <h2 style="margin-bottom: 8px;">Sound.Loop</h2>
        <code>Sound.Loop(sound[, loopPoint])</code>
        <div style="margin-top: 8px; font-size: 14px;">Plays a sound, looping back when it ends.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sound (Integer): The sound index to play.</li>
        <li>loopPoint (Integer): Loop point in samples.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Sound_Stop">
        <h2 style="margin-bottom: 8px;">Sound.Stop</h2>
        <code>Sound.Stop(sound)</code>
        <div style="margin-top: 8px; font-size: 14px;">Stops an actively playing sound.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sound (Integer): The sound index to stop.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Sound_Pause">
        <h2 style="margin-bottom: 8px;">Sound.Pause</h2>
        <code>Sound.Pause(sound)</code>
        <div style="margin-top: 8px; font-size: 14px;">Pauses an actively playing sound.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sound (Integer): The sound index to pause.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Sound_Resume">
        <h2 style="margin-bottom: 8px;">Sound.Resume</h2>
        <code>Sound.Resume(sound)</code>
        <div style="margin-top: 8px; font-size: 14px;">Unpauses an paused sound.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sound (Integer): The sound index to resume.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Sound_StopAll">
        <h2 style="margin-bottom: 8px;">Sound.StopAll</h2>
        <code>Sound.StopAll()</code>
        <div style="margin-top: 8px; font-size: 14px;">Stops all actively playing sounds.</div>
        </p>
        <hr/>
        <p id="Reference_Sound_PauseAll">
        <h2 style="margin-bottom: 8px;">Sound.PauseAll</h2>
        <code>Sound.PauseAll()</code>
        <div style="margin-top: 8px; font-size: 14px;">Pauses all actively playing sounds.</div>
        </p>
        <hr/>
        <p id="Reference_Sound_ResumeAll">
        <h2 style="margin-bottom: 8px;">Sound.ResumeAll</h2>
        <code>Sound.ResumeAll()</code>
        <div style="margin-top: 8px; font-size: 14px;">Resumes all actively playing sounds.</div>
        </p>
        <hr/>
        <p id="Reference_Sound_IsPlaying">
        <h2 style="margin-bottom: 8px;">Sound.IsPlaying</h2>
        <code>Sound.IsPlaying(sound)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks whether a sound is currently playing or not.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sound (Integer): The sound index to play.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Sprite_GetAnimationCount">
        <h2 style="margin-bottom: 8px;">Sprite.GetAnimationCount</h2>
        <code>Sprite.GetAnimationCount(sprite)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the amount of animations in the sprite.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): The sprite index to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the amount of animations in the sprite.</div>
        </p>
        <hr/>
        <p id="Reference_Sprite_GetFrameLoopIndex">
        <h2 style="margin-bottom: 8px;">Sprite.GetFrameLoopIndex</h2>
        <code>Sprite.GetFrameLoopIndex(sprite, animation)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the index of the frame that the specified animation will loop back to when it finishes.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): The sprite index to check.</li>
        <li>animation (Integer): The animation index of the sprite to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the frame loop index.</div>
        </p>
        <hr/>
        <p id="Reference_Sprite_GetFrameCount">
        <h2 style="margin-bottom: 8px;">Sprite.GetFrameCount</h2>
        <code>Sprite.GetFrameCount(sprite, animation)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the amount of frames in the specified animation.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): The sprite index to check.</li>
        <li>animation (Integer): The animation index of the sprite to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the frame count in the specified animation.</div>
        </p>
        <hr/>
        <p id="Reference_Sprite_GetFrameDuration">
        <h2 style="margin-bottom: 8px;">Sprite.GetFrameDuration</h2>
        <code>Sprite.GetFrameDuration(sprite, animation, frame)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the frame duration of the specified sprite frame.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): The sprite index to check.</li>
        <li>animation (Integer): The animation index of the sprite to check.</li>
        <li>frame (Integer): The frame index of the animation to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the frame duration (in game frames) of the specified sprite frame.</div>
        </p>
        <hr/>
        <p id="Reference_Sprite_GetFrameSpeed">
        <h2 style="margin-bottom: 8px;">Sprite.GetFrameSpeed</h2>
        <code>Sprite.GetFrameSpeed(sprite, animation)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the animation speed of the specified animation.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>sprite (Integer): The sprite index to check.</li>
        <li>animation (Integer): The animation index of the sprite to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_Split">
        <h2 style="margin-bottom: 8px; color: red;">String.Split</h2>
        <code>String.Split()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_String_CharAt">
        <h2 style="margin-bottom: 8px;">String.CharAt</h2>
        <code>String.CharAt(string, index)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the UTF8 value of the character at the specified index.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        <li>index (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the UTF8 value as an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_Length">
        <h2 style="margin-bottom: 8px;">String.Length</h2>
        <code>String.Length(string)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the length of the String value.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the length of the String value as an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_Compare">
        <h2 style="margin-bottom: 8px;">String.Compare</h2>
        <code>String.Compare(stringA, stringB)</code>
        <div style="margin-top: 8px; font-size: 14px;">Compare two Strings and retrieve a numerical difference.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>stringA (String):</li>
        <li>stringB (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the comparison result as an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_IndexOf">
        <h2 style="margin-bottom: 8px;">String.IndexOf</h2>
        <code>String.IndexOf(string, substring)</code>
        <div style="margin-top: 8px; font-size: 14px;">Get the first index at which the substring occurs in the string.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        <li>substring (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the index as an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_Contains">
        <h2 style="margin-bottom: 8px;">String.Contains</h2>
        <code>String.Contains(string, substring)</code>
        <div style="margin-top: 8px; font-size: 14px;">Searches for whether or not a substring is within a String value.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        <li>substring (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_String_Substring">
        <h2 style="margin-bottom: 8px;">String.Substring</h2>
        <code>String.Substring(string, startIndex, length)</code>
        <div style="margin-top: 8px; font-size: 14px;">Get a String value from a portion of a larger String value.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        <li>startIndex (Integer):</li>
        <li>length (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a String value.</div>
        </p>
        <hr/>
        <p id="Reference_String_ToUpperCase">
        <h2 style="margin-bottom: 8px;">String.ToUpperCase</h2>
        <code>String.ToUpperCase(string)</code>
        <div style="margin-top: 8px; font-size: 14px;">Convert a String value to its uppercase representation.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a uppercase String value.</div>
        </p>
        <hr/>
        <p id="Reference_String_ToLowerCase">
        <h2 style="margin-bottom: 8px;">String.ToLowerCase</h2>
        <code>String.ToLowerCase(string)</code>
        <div style="margin-top: 8px; font-size: 14px;">Convert a String value to its lowercase representation.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a lowercase String value.</div>
        </p>
        <hr/>
        <p id="Reference_String_LastIndexOf">
        <h2 style="margin-bottom: 8px;">String.LastIndexOf</h2>
        <code>String.LastIndexOf(string, substring)</code>
        <div style="margin-top: 8px; font-size: 14px;">Get the last index at which the substring occurs in the string.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        <li>substring (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the index as an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_ParseInteger">
        <h2 style="margin-bottom: 8px;">String.ParseInteger</h2>
        <code>String.ParseInteger(string)</code>
        <div style="margin-top: 8px; font-size: 14px;">Convert a String value to an Integer value if possible.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the value as an Integer.</div>
        </p>
        <hr/>
        <p id="Reference_String_ParseDecimal">
        <h2 style="margin-bottom: 8px;">String.ParseDecimal</h2>
        <code>String.ParseDecimal(string)</code>
        <div style="margin-top: 8px; font-size: 14px;">Convert a String value to an Decimal value if possible.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>string (String):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the value as an Decimal.</div>
        </p>
        <hr/>
        <p id="Reference_Texture_Create">
        <h2 style="margin-bottom: 8px; color: red;">Texture.Create</h2>
        <code>Texture.Create()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Texture_FromSprite">
        <h2 style="margin-bottom: 8px; color: red;">Texture.FromSprite</h2>
        <code>Texture.FromSprite()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Texture_FromImage">
        <h2 style="margin-bottom: 8px; color: red;">Texture.FromImage</h2>
        <code>Texture.FromImage()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Texture_SetInterpolation">
        <h2 style="margin-bottom: 8px; color: red;">Texture.SetInterpolation</h2>
        <code>Texture.SetInterpolation()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Touch_GetX">
        <h2 style="margin-bottom: 8px;">Touch.GetX</h2>
        <code>Touch.GetX(touchIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the X position of a touch.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>touchIndex (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_Touch_GetY">
        <h2 style="margin-bottom: 8px;">Touch.GetY</h2>
        <code>Touch.GetY(touchIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the Y position of a touch.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>touchIndex (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_Touch_IsDown">
        <h2 style="margin-bottom: 8px;">Touch.IsDown</h2>
        <code>Touch.IsDown(touchIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether a touch is currently down on the screen.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>touchIndex (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_Touch_IsPressed">
        <h2 style="margin-bottom: 8px;">Touch.IsPressed</h2>
        <code>Touch.IsPressed(touchIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether a touch just pressed down on the screen.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>touchIndex (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_Touch_IsReleased">
        <h2 style="margin-bottom: 8px;">Touch.IsReleased</h2>
        <code>Touch.IsReleased(touchIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether a touch just released from the screen.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>touchIndex (Integer):</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_TileCollision_Point">
        <h2 style="margin-bottom: 8px;">TileCollision.Point</h2>
        <code>TileCollision.Point(x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks for a tile collision at a specified point, returning <code>true</code> if successful, <code>false</code> if otherwise.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position to check.</li>
        <li>y (Number): Y position to check.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_TileCollision_PointExtended">
        <h2 style="margin-bottom: 8px;">TileCollision.PointExtended</h2>
        <code>TileCollision.PointExtended(x, y, collisionField, collisionSide)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks for a tile collision at a specified point, returning the angle value if successful, <code>-1</code> if otherwise.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position to check.</li>
        <li>y (Number): Y position to check.</li>
        <li>collisionField (Integer): Low (0) or high (1) field to check.</li>
        <li>collisionSide (Integer): Which side of the tile to check for collision. (TOP = 1, RIGHT = 2, BOTTOM = 4, LEFT = 8, ALL = 15)</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the angle of the ground as an Integer value.</div>
        </p>
        <hr/>
        <p id="Reference_TileCollision_Line">
        <h2 style="margin-bottom: 8px;">TileCollision.Line</h2>
        <code>TileCollision.Line(x, y, directionType, length, collisionField, compareAngle)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks for a tile collision in a straight line, returning the angle value if successful, <code>-1</code> if otherwise.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): X position to start checking from.</li>
        <li>y (Number): Y position to start checking from.</li>
        <li>directionType (Integer): Ordinal direction to check in. (0: Down, 1: Right, 2: Up, 3: Left, or one of the enums: SensorDirection_Up, SensorDirection_Left, SensorDirection_Down, SensorDirection_Right)</li>
        <li>length (Integer): How many pixels to check.</li>
        <li>collisionField (Integer): Low (0) or high (1) field to check.</li>
        <li>compareAngle (Integer): Only return a collision if the angle is within 0x20 this value, otherwise if angle comparison is not desired, set this value to -1.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Map value with the following structure: <br/><pre class="code">{ <br/>    X: (Number), // X Position where the sensor collided if it did. <br/>    Y: (Number), // Y Position where the sensor collided if it did. <br/>    Collided: (Boolean), // Whether or not the sensor collided. <br/>    Angle: (Integer) // Tile angle at the collision. <br/>}</pre></div>
        </p>
        <hr/>
        <p id="Reference_TileInfo_SetSpriteInfo">
        <h2 style="margin-bottom: 8px;">TileInfo.SetSpriteInfo</h2>
        <code>TileInfo.SetSpriteInfo(tileID, spriteIndex, animationIndex, frameIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the sprite, animation, and frame to use for specified tile.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>tileID (Integer): ID of tile to check.</li>
        <li>spriteIndex (Integer): Sprite index. (-1 for default tile sprite)</li>
        <li>animationIndex (Integer): Animation index.</li>
        <li>frameIndex (Integer): Frame index. (-1 for default tile frame)</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_TileInfo_IsEmptySpace">
        <h2 style="margin-bottom: 8px;">TileInfo.IsEmptySpace</h2>
        <code>TileInfo.IsEmptySpace(tileID, collisionPlane)</code>
        <div style="margin-top: 8px; font-size: 14px;">Checks to see if a tile at the ID is empty.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>tileID (Integer): ID of tile to check.</li>
        <li>collisionPlane (Integer): The collision plane of the tile to check for.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">1 if the tile is empty space, 0 if otherwise.</div>
        </p>
        <hr/>
        <p id="Reference_TileInfo_GetCollision">
        <h2 style="margin-bottom: 8px;">TileInfo.GetCollision</h2>
        <code>TileInfo.GetCollision(tileID, collisionField, directionType, position[, flipX, flipY])</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the collision value at the pixel position of the desired tile, -1 if no collision.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>tileID (Integer): ID of the tile to get the value of.</li>
        <li>collisionField (Integer): The collision plane of the tile to get the collision from.</li>
        <li>directionType (Integer): Ordinal direction to check in. (0: Down, 1: Right, 2: Up, 3: Left, or one of the enums: SensorDirection_Up, SensorDirection_Left, SensorDirection_Down, SensorDirection_Right)</li>
        <li>position (Integer): Position on the tile to check, X position if the directionType is Up/Down, Y position if the directionType is Left/Right.</li>
        <li>flipX (Boolean): Whether or not to check the collision with the tile horizontally flipped.</li>
        <li>flipY (Boolean): Whether or not to check the collision with the tile vertically flipped.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Collision position (Integer) on the tile, X position if the directionType is Left/Right, Y position if the directionType is Up/Down, -1 if there was no collision.</div>
        </p>
        <hr/>
        <p id="Reference_TileInfo_GetAngle">
        <h2 style="margin-bottom: 8px;">TileInfo.GetAngle</h2>
        <code>TileInfo.GetAngle(tileID, collisionField, directionType[, flipX, flipY])</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the angle value of the desired tile.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>tileID (Integer): ID of the tile to get the value of.</li>
        <li>collisionField (Integer): The collision plane of the tile to get the angle from.</li>
        <li>directionType (Integer): Ordinal direction to check in. (0: Down, 1: Right, 2: Up, 3: Left, or one of the enums: SensorDirection_Up, SensorDirection_Left, SensorDirection_Down, SensorDirection_Right)</li>
        <li>flipX (Boolean): Whether or not to check the angle with the tile horizontally flipped.</li>
        <li>flipY (Boolean): Whether or not to check the angle with the tile vertically flipped.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Angle value between 0x00 to 0xFF at the specified direction.</div>
        </p>
        <hr/>
        <p id="Reference_TileInfo_GetBehaviorFlag">
        <h2 style="margin-bottom: 8px;">TileInfo.GetBehaviorFlag</h2>
        <code>TileInfo.GetBehaviorFlag(tileID, collisionPlane)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the behavior value of the desired tile.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>tileID (Integer): ID of the tile to get the value of.</li>
        <li>collisionPlane (Integer): The collision plane of the tile to get the behavior from.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Behavior flag (Integer) of the tile.</div>
        </p>
        <hr/>
        <p id="Reference_Thread_RunEvent">
        <h2 style="margin-bottom: 8px; color: red;">Thread.RunEvent</h2>
        <code>Thread.RunEvent()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Thread_Sleep">
        <h2 style="margin-bottom: 8px; color: red;">Thread.Sleep</h2>
        <code>Thread.Sleep()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_Play">
        <h2 style="margin-bottom: 8px; color: red;">Video.Play</h2>
        <code>Video.Play()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_Pause">
        <h2 style="margin-bottom: 8px; color: red;">Video.Pause</h2>
        <code>Video.Pause()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_Resume">
        <h2 style="margin-bottom: 8px; color: red;">Video.Resume</h2>
        <code>Video.Resume()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_Stop">
        <h2 style="margin-bottom: 8px; color: red;">Video.Stop</h2>
        <code>Video.Stop()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_Close">
        <h2 style="margin-bottom: 8px; color: red;">Video.Close</h2>
        <code>Video.Close()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_IsBuffering">
        <h2 style="margin-bottom: 8px; color: red;">Video.IsBuffering</h2>
        <code>Video.IsBuffering()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_IsPlaying">
        <h2 style="margin-bottom: 8px; color: red;">Video.IsPlaying</h2>
        <code>Video.IsPlaying()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_IsPaused">
        <h2 style="margin-bottom: 8px; color: red;">Video.IsPaused</h2>
        <code>Video.IsPaused()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_SetPosition">
        <h2 style="margin-bottom: 8px; color: red;">Video.SetPosition</h2>
        <code>Video.SetPosition()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_SetBufferDuration">
        <h2 style="margin-bottom: 8px; color: red;">Video.SetBufferDuration</h2>
        <code>Video.SetBufferDuration()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_SetTrackEnabled">
        <h2 style="margin-bottom: 8px; color: red;">Video.SetTrackEnabled</h2>
        <code>Video.SetTrackEnabled()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetPosition">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetPosition</h2>
        <code>Video.GetPosition()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetDuration">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetDuration</h2>
        <code>Video.GetDuration()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetBufferDuration">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetBufferDuration</h2>
        <code>Video.GetBufferDuration()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetBufferEnd">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetBufferEnd</h2>
        <code>Video.GetBufferEnd()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetTrackCount">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetTrackCount</h2>
        <code>Video.GetTrackCount()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetTrackEnabled">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetTrackEnabled</h2>
        <code>Video.GetTrackEnabled()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetTrackName">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetTrackName</h2>
        <code>Video.GetTrackName()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetTrackLanguage">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetTrackLanguage</h2>
        <code>Video.GetTrackLanguage()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetDefaultVideoTrack">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetDefaultVideoTrack</h2>
        <code>Video.GetDefaultVideoTrack()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetDefaultAudioTrack">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetDefaultAudioTrack</h2>
        <code>Video.GetDefaultAudioTrack()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetDefaultSubtitleTrack">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetDefaultSubtitleTrack</h2>
        <code>Video.GetDefaultSubtitleTrack()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetWidth">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetWidth</h2>
        <code>Video.GetWidth()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_Video_GetHeight">
        <h2 style="margin-bottom: 8px; color: red;">Video.GetHeight</h2>
        <code>Video.GetHeight()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_View_SetX">
        <h2 style="margin-bottom: 8px;">View.SetX</h2>
        <code>View.SetX(viewIndex, x)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the x-axis position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>x (Number): Desired X position</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_SetY">
        <h2 style="margin-bottom: 8px;">View.SetY</h2>
        <code>View.SetY(viewIndex, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the y-axis position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>y (Number): Desired Y position</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_SetZ">
        <h2 style="margin-bottom: 8px;">View.SetZ</h2>
        <code>View.SetZ(viewIndex, z)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the z-axis position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>z (Number): Desired Z position</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_SetPosition">
        <h2 style="margin-bottom: 8px;">View.SetPosition</h2>
        <code>View.SetPosition(viewIndex, x, y[, z])</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>x (Number): Desired X position</li>
        <li>y (Number): Desired Y position</li>
        <li>z (Number): Desired Z position</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_SetAngle">
        <h2 style="margin-bottom: 8px;">View.SetAngle</h2>
        <code>View.SetAngle(viewIndex, x, y, z)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the angle of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>x (Number): Desired X angle</li>
        <li>y (Number): Desired Y angle</li>
        <li>z (Number): Desired Z angle</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_GetX">
        <h2 style="margin-bottom: 8px;">View.GetX</h2>
        <code>View.GetX(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the x-axis position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_View_GetY">
        <h2 style="margin-bottom: 8px;">View.GetY</h2>
        <code>View.GetY(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the y-axis position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_View_GetZ">
        <h2 style="margin-bottom: 8px;">View.GetZ</h2>
        <code>View.GetZ(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the z-axis position of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_View_GetWidth">
        <h2 style="margin-bottom: 8px;">View.GetWidth</h2>
        <code>View.GetWidth(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the width of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_View_GetHeight">
        <h2 style="margin-bottom: 8px;">View.GetHeight</h2>
        <code>View.GetHeight(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the height of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Number value.</div>
        </p>
        <hr/>
        <p id="Reference_View_SetSize">
        <h2 style="margin-bottom: 8px;">View.SetSize</h2>
        <code>View.SetSize(viewIndex, width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the size of the camera for the specified view.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>width (Number): Desired width.</li>
        <li>height (Number): Desired height.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_IsUsingDrawTarget">
        <h2 style="margin-bottom: 8px;">View.IsUsingDrawTarget</h2>
        <code>View.IsUsingDrawTarget(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the specified camera is using a draw target or not.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_View_SetUseDrawTarget">
        <h2 style="margin-bottom: 8px;">View.SetUseDrawTarget</h2>
        <code>View.SetUseDrawTarget(viewIndex, useDrawTarget)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the specified camera to use a draw target.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>useDrawTarget (Boolean):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_IsUsingSoftwareRenderer">
        <h2 style="margin-bottom: 8px;">View.IsUsingSoftwareRenderer</h2>
        <code>View.IsUsingSoftwareRenderer(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the specified camera is using the software renderer or not.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_View_SetUseSoftwareRenderer">
        <h2 style="margin-bottom: 8px;">View.SetUseSoftwareRenderer</h2>
        <code>View.SetUseSoftwareRenderer(viewIndex, useSoftwareRenderer)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the specified camera to use the software renderer.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>useSoftwareRenderer (Boolean):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_SetUsePerspective">
        <h2 style="margin-bottom: 8px; color: red;">View.SetUsePerspective</h2>
        <code>View.SetUsePerspective()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_View_IsEnabled">
        <h2 style="margin-bottom: 8px;">View.IsEnabled</h2>
        <code>View.IsEnabled(viewIndex)</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether the specified camera is active or not.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        </ul>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns a Boolean value.</div>
        </p>
        <hr/>
        <p id="Reference_View_SetEnabled">
        <h2 style="margin-bottom: 8px;">View.SetEnabled</h2>
        <code>View.SetEnabled(viewIndex, enabled)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the specified camera to be active.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>viewIndex (Integer): Index of the view.</li>
        <li>enabled (Boolean):</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_View_SetFieldOfView">
        <h2 style="margin-bottom: 8px; color: red;">View.SetFieldOfView</h2>
        <code>View.SetFieldOfView()</code>
        <div style="margin-top: 8px; font-size: 14px;"></div>
        </p>
        <hr/>
        <p id="Reference_View_GetCurrent">
        <h2 style="margin-bottom: 8px;">View.GetCurrent</h2>
        <code>View.GetCurrent()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the current view index being drawn to.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns an Integer value.</div>
        </p>
        <hr/>
        <p id="Reference_Window_SetSize">
        <h2 style="margin-bottom: 8px;">Window.SetSize</h2>
        <code>Window.SetSize(width, height)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the size of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>width (Number): Window width</li>
        <li>height (Number): Window height</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Window_SetFullscreen">
        <h2 style="margin-bottom: 8px;">Window.SetFullscreen</h2>
        <code>Window.SetFullscreen(isFullscreen)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the fullscreen state of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>isFullscreen (Boolean): Whether or not the window should be fullscreen.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Window_SetBorderless">
        <h2 style="margin-bottom: 8px;">Window.SetBorderless</h2>
        <code>Window.SetBorderless(isBorderless)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the bordered state of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>isBorderless (Boolean): Whether or not the window should be borderless.</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Window_SetPosition">
        <h2 style="margin-bottom: 8px;">Window.SetPosition</h2>
        <code>Window.SetPosition(x, y)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the position of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>x (Number): Window x</li>
        <li>y (Number): Window y</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Window_SetPositionCentered">
        <h2 style="margin-bottom: 8px;">Window.SetPositionCentered</h2>
        <code>Window.SetPositionCentered()</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the position of the active window to the center of the display.</div>
        </p>
        <hr/>
        <p id="Reference_Window_SetTitle">
        <h2 style="margin-bottom: 8px;">Window.SetTitle</h2>
        <code>Window.SetTitle(title)</code>
        <div style="margin-top: 8px; font-size: 14px;">Sets the title of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Parameters:</div>
        <ul style="margin-top: 0px; font-size: 14px;">
        <li>title (String): Window title</li>
        </ul>
        </p>
        <hr/>
        <p id="Reference_Window_GetWidth">
        <h2 style="margin-bottom: 8px;">Window.GetWidth</h2>
        <code>Window.GetWidth()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the width of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the width of the active window.</div>
        </p>
        <hr/>
        <p id="Reference_Window_GetHeight">
        <h2 style="margin-bottom: 8px;">Window.GetHeight</h2>
        <code>Window.GetHeight()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets the height of the active window.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns the height of the active window.</div>
        </p>
        <hr/>
        <p id="Reference_Window_GetFullscreen">
        <h2 style="margin-bottom: 8px;">Window.GetFullscreen</h2>
        <code>Window.GetFullscreen()</code>
        <div style="margin-top: 8px; font-size: 14px;">Gets whether or not the active window is currently fullscreen.</div>
        <div style="font-weight: bold; margin-top: 8px;">Returns:</div>
        <div style="font-size: 14px;">Returns <code>true</code> if the window is fullscreen, <code>false</code> if otherwise.</div>
        </p>
        <p>273 out of 345 functions have descriptions. </p>
    </body>
</html>
