
#include <Availability.h>

#import <Metal/Metal.h>
#import <QuartzCore/CAMetalLayer.h>

#ifdef __MACOSX__
    #import <AppKit/NSView.h>
#endif

/* Regenerate these with build-metal-shaders.sh */
// #ifdef __MACOSX__
//     #include "SDL_shaders_metal_osx.h"
// #elif defined(__TVOS__)
//     #if TARGET_OS_SIMULATOR
//         #include "SDL_shaders_metal_tvsimulator.h"
//     #else
//         #include "SDL_shaders_metal_tvos.h"
//     #endif
// #else
//     #if TARGET_OS_SIMULATOR
//         #include "SDL_shaders_metal_iphonesimulator.h"
//     #else
//         #include "SDL_shaders_metal_ios.h"
//     #endif
// #endif

#include <Engine/Rendering/Metal/MetalFuncs.h>

@interface METAL_TextureData : NSObject
    @property (nonatomic, retain) id<MTLTexture> mtltexture;
    @property (nonatomic, retain) id<MTLTexture> mtltexture_uv;
    @property (nonatomic, retain) id<MTLSamplerState> mtlsampler;
    @property (nonatomic, assign) SDL_MetalFragmentFunction fragmentFunction;
    @property (nonatomic, assign) BOOL yuv;
    @property (nonatomic, assign) BOOL nv12;
    @property (nonatomic, assign) size_t conversionBufferOffset;
    @property (nonatomic, assign) BOOL hasdata;

    @property (nonatomic, retain) id<MTLBuffer> lockedbuffer;
    @property (nonatomic, assign) SDL_Rect lockedrect;
@end

@implementation METAL_TextureData
#if !__has_feature(objc_arc)
    - (void)dealloc {
        [_mtltexture release];
        [_mtltexture_uv release];
        [_mtlsampler release];
        [_lockedbuffer release];
        [super dealloc];
    }
#endif
@end

static int IsMetalAvailable(const SDL_SysWMinfo* syswm) {
    if (syswm->subsystem != SDL_SYSWM_COCOA && syswm->subsystem != SDL_SYSWM_UIKIT) {
        Log::Print(Log::LOG_ERROR, "Metal render target only supports Cocoa and UIKit video targets at the moment.");
        return -1;
    }
    // this checks a weak symbol.
    #if (defined(__MACOSX__) && (MAC_OS_X_VERSION_MIN_REQUIRED < 101100))
        if (MTLCreateSystemDefaultDevice == NULL) {  // probably on 10.10 or lower.
            Log::Print(Log::LOG_ERROR, "Metal framework not available on this system");
            return -1;
        }
    #endif

    return 0;
}

void     METAL_Init() {
    @autoreleasepool {
        Graphics::PreferredPixelFormat = SDL_PIXELFORMAT_ARGB8888;
        Metal_MatrixIdentity = Matrix4x4::Create();

        // renderData = (Metal_RenderData*)calloc(1, sizeof(Metal_RenderData));

        Log::Print(Log::LOG_INFO, "Renderer: Metal");

        SDL_SysWMinfo windowinfo;
        SDL_DisplayMode fullscreen_mode;
        int displayIndex, w, h, texture_max_w, texture_max_h;

    	SDL_VERSION(&windowinfo.version);
        SDL_GetWindowWMInfo(Application::Window, &windowinfo);

        SDL_GetWindowSize(Application::Window, &w, &h);
        SDL_GetWindowDisplayMode(Application::Window, &fullscreen_mode);

        mtldevice = MTLCreateSystemDefaultDevice();

        if (mtldevice == nil) {
            SDL_free(renderer);
            SDL_SetError("Failed to obtain Metal device");
            if (changed_window) {
                SDL_RecreateWindow(window, window_flags);
            }
            return NULL;
        }

        view = SDL_Metal_CreateView(window);

        if (view == NULL) {
            #if !__has_feature(objc_arc)
            [mtldevice release];
            #endif

            SDL_free(renderer);
            if (changed_window) {
                SDL_RecreateWindow(window, window_flags);
            }
            return NULL;
        }

        // !!! FIXME: error checking on all of this.
        data = [[METAL_RenderData alloc] init];

        if (data == nil) {
    #if !__has_feature(objc_arc)
            [mtldevice release];
    #endif
            SDL_Metal_DestroyView(view);
            SDL_free(renderer);
            if (changed_window) {
                SDL_RecreateWindow(window, window_flags);
            }
            return NULL;
        }

        driverdata = (void*)CFBridgingRetain(data);

        data.mtlview = view;

    #ifdef __MACOSX__
        layer = (CAMetalLayer *)[(NSView *)view layer];
    #else
        layer = (CAMetalLayer *)[(__bridge UIView *)view layer];
    #endif

        layer.device = mtldevice;

        /* Necessary for RenderReadPixels. */
        layer.framebufferOnly = NO;

        data.mtldevice = layer.device;
        data.mtllayer = layer;
        id<MTLCommandQueue> mtlcmdqueue = [data.mtldevice newCommandQueue];
        data.mtlcmdqueue = mtlcmdqueue;
        data.mtlcmdqueue.label = @"SDL Metal Renderer";
        data.mtlpassdesc = [MTLRenderPassDescriptor renderPassDescriptor];

        NSError *err = nil;

        // The compiled .metallib is embedded in a static array in a header file
        // but the original shader source code is in SDL_shaders_metal.metal.
        dispatch_data_t mtllibdata = dispatch_data_create(sdl_metallib, sdl_metallib_len, dispatch_get_global_queue(0, 0), ^{});
        id<MTLLibrary> mtllibrary = [data.mtldevice newLibraryWithData:mtllibdata error:&err];
        data.mtllibrary = mtllibrary;
        SDL_assert(err == nil);
    #if !__has_feature(objc_arc)
        dispatch_release(mtllibdata);
    #endif
        data.mtllibrary.label = @"SDL Metal renderer shader library";

        /* Do some shader pipeline state loading up-front rather than on demand. */
        data.pipelinescount = 0;
        data.allpipelines = NULL;
        ChooseShaderPipelines(data, MTLPixelFormatBGRA8Unorm);

        MTLSamplerDescriptor *samplerdesc = [[MTLSamplerDescriptor alloc] init];

        samplerdesc.minFilter = MTLSamplerMinMagFilterNearest;
        samplerdesc.magFilter = MTLSamplerMinMagFilterNearest;
        id<MTLSamplerState> mtlsamplernearest = [data.mtldevice newSamplerStateWithDescriptor:samplerdesc];
        data.mtlsamplernearest = mtlsamplernearest;

        samplerdesc.minFilter = MTLSamplerMinMagFilterLinear;
        samplerdesc.magFilter = MTLSamplerMinMagFilterLinear;
        id<MTLSamplerState> mtlsamplerlinear = [data.mtldevice newSamplerStateWithDescriptor:samplerdesc];
        data.mtlsamplerlinear = mtlsamplerlinear;

        /* Note: matrices are column major. */
        float identitytransform[16] = {
            1.000000000f, 0.000000000f, 0.000000000f, 0.000000000f,
            0.000000000f, 1.000000000f, 0.000000000f, 0.000000000f,
            0.000000000f, 0.000000000f, 1.000000000f, 0.000000000f,
            0.000000000f, 0.000000000f, 0.000000000f, 1.000000000f,
        };
        float halfpixeltransform[16] = {
            1.000000000f, 0.000000000f, 0.000000000f, 0.000000000f,
            0.000000000f, 1.000000000f, 0.000000000f, 0.000000000f,
            0.000000000f, 0.000000000f, 1.000000000f, 0.000000000f,
            0.500000000f, 0.500000000f, 0.000000000f, 1.000000000f,
        };
        /* Metal pads float3s to 16 bytes. */
        float decodetransformJPEG[4*4] = {
            0.000000000, -0.501960814, -0.501960814, 0.000000000, /* offset */
            1.000000000,  0.000000000,  1.402000000, 0.000000000, /* Rcoeff */
            1.000000000, -0.344100000, -0.714100000, 0.000000000, /* Gcoeff */
            1.000000000,  1.772000000,  0.000000000, 0.000000000, /* Bcoeff */
        };
        float decodetransformBT601[4*4] = {
            -0.0627451017, -0.501960814, -0.501960814, 0.000000000, /* offset */
             1.1644000000,  0.000000000,  1.596000000, 0.000000000, /* Rcoeff */
             1.1644000000, -0.391800000, -0.813000000, 0.000000000, /* Gcoeff */
             1.1644000000,  2.017200000,  0.000000000, 0.000000000, /* Bcoeff */
        };
        float decodetransformBT709[4*4] = {
            0.000000000, -0.501960814, -0.501960814, 0.000000000, /* offset */
            1.000000000,  0.000000000,  1.402000000, 0.000000000, /* Rcoeff */
            1.000000000, -0.344100000, -0.714100000, 0.000000000, /* Gcoeff */
            1.000000000,  1.772000000,  0.000000000, 0.000000000, /* Bcoeff */
        };

        id<MTLBuffer> mtlbufconstantstaging = [data.mtldevice newBufferWithLength:CONSTANTS_LENGTH options:MTLResourceStorageModeShared];
        #if !__has_feature(objc_arc)
        [mtlbufconstantstaging autorelease];
        #endif

        char *constantdata = [mtlbufconstantstaging contents];
        SDL_memcpy(constantdata + CONSTANTS_OFFSET_IDENTITY, identitytransform, sizeof(identitytransform));
        SDL_memcpy(constantdata + CONSTANTS_OFFSET_HALF_PIXEL_TRANSFORM, halfpixeltransform, sizeof(halfpixeltransform));
        SDL_memcpy(constantdata + CONSTANTS_OFFSET_DECODE_JPEG, decodetransformJPEG, sizeof(decodetransformJPEG));
        SDL_memcpy(constantdata + CONSTANTS_OFFSET_DECODE_BT601, decodetransformBT601, sizeof(decodetransformBT601));
        SDL_memcpy(constantdata + CONSTANTS_OFFSET_DECODE_BT709, decodetransformBT709, sizeof(decodetransformBT709));

        int quadcount = UINT16_MAX / 4;
        size_t indicessize = sizeof(UInt16) * quadcount * 6;
        id<MTLBuffer> mtlbufquadindicesstaging = [data.mtldevice newBufferWithLength:indicessize options:MTLResourceStorageModeShared];
    #if !__has_feature(objc_arc)
        [mtlbufquadindicesstaging autorelease];
    #endif

        /* Quads in the following vertex order (matches the FillRects vertices):
         * 1---3
         * | \ |
         * 0---2
         */
        UInt16 *indexdata = [mtlbufquadindicesstaging contents];
        for (int i = 0; i < quadcount; i++) {
            indexdata[i * 6 + 0] = i * 4 + 0;
            indexdata[i * 6 + 1] = i * 4 + 1;
            indexdata[i * 6 + 2] = i * 4 + 2;

            indexdata[i * 6 + 3] = i * 4 + 2;
            indexdata[i * 6 + 4] = i * 4 + 1;
            indexdata[i * 6 + 5] = i * 4 + 3;
        }

        id<MTLBuffer> mtlbufconstants = [data.mtldevice newBufferWithLength:CONSTANTS_LENGTH options:MTLResourceStorageModePrivate];
        data.mtlbufconstants = mtlbufconstants;
        data.mtlbufconstants.label = @"SDL constant data";

        id<MTLBuffer> mtlbufquadindices = [data.mtldevice newBufferWithLength:indicessize options:MTLResourceStorageModePrivate];
        data.mtlbufquadindices = mtlbufquadindices;
        data.mtlbufquadindices.label = @"SDL quad index buffer";

        id<MTLCommandBuffer> cmdbuffer = [data.mtlcmdqueue commandBuffer];
        id<MTLBlitCommandEncoder> blitcmd = [cmdbuffer blitCommandEncoder];

        [blitcmd copyFromBuffer:mtlbufconstantstaging sourceOffset:0 toBuffer:mtlbufconstants destinationOffset:0 size:CONSTANTS_LENGTH];
        [blitcmd copyFromBuffer:mtlbufquadindicesstaging sourceOffset:0 toBuffer:mtlbufquadindices destinationOffset:0 size:indicessize];

        [blitcmd endEncoding];
        [cmdbuffer commit];

        // !!! FIXME: force more clears here so all the drawables are sane to start, and our static buffers are definitely flushed.

    //     renderer->WindowEvent = METAL_WindowEvent;
    //     renderer->GetOutputSize = METAL_GetOutputSize;
    //     renderer->SupportsBlendMode = METAL_SupportsBlendMode;
    //     renderer->CreateTexture = METAL_CreateTexture;
    //     renderer->UpdateTexture = METAL_UpdateTexture;
    // #if SDL_HAVE_YUV
    //     renderer->UpdateTextureYUV = METAL_UpdateTextureYUV;
    //     renderer->UpdateTextureNV = METAL_UpdateTextureNV;
    // #endif
    //     renderer->LockTexture = METAL_LockTexture;
    //     renderer->UnlockTexture = METAL_UnlockTexture;
    //     renderer->SetTextureScaleMode = METAL_SetTextureScaleMode;
    //     renderer->SetRenderTarget = METAL_SetRenderTarget;
    //     renderer->QueueSetViewport = METAL_QueueSetViewport;
    //     renderer->QueueSetDrawColor = METAL_QueueSetDrawColor;
    //     renderer->QueueDrawPoints = METAL_QueueDrawPoints;
    //     renderer->QueueDrawLines = METAL_QueueDrawLines;
    //     renderer->QueueFillRects = METAL_QueueFillRects;
    //     renderer->QueueCopy = METAL_QueueCopy;
    //     renderer->QueueCopyEx = METAL_QueueCopyEx;
    //     renderer->RunCommandQueue = METAL_RunCommandQueue;
    //     renderer->RenderReadPixels = METAL_RenderReadPixels;
    //     renderer->RenderPresent = METAL_RenderPresent;
    //     renderer->DestroyTexture = METAL_DestroyTexture;
    //     renderer->DestroyRenderer = METAL_DestroyRenderer;
    //     renderer->GetMetalLayer = METAL_GetMetalLayer;
    //     renderer->GetMetalCommandEncoder = METAL_GetMetalCommandEncoder;
    //
    //     renderer->info = METAL_RenderDriver.info;
    //     renderer->info.flags = (SDL_RENDERER_ACCELERATED | SDL_RENDERER_TARGETTEXTURE);
    //
    //     renderer->always_batch = SDL_TRUE;

    #if (defined(__MACOSX__) && defined(MAC_OS_X_VERSION_10_13)) || TARGET_OS_MACCATALYST
        if (@available(macOS 10.13, *)) {
            data.mtllayer.displaySyncEnabled = (flags & SDL_RENDERER_PRESENTVSYNC) != 0;
            if (data.mtllayer.displaySyncEnabled) {
                renderer->info.flags |= SDL_RENDERER_PRESENTVSYNC;
            }
        } else
    #endif
        {
            renderer->info.flags |= SDL_RENDERER_PRESENTVSYNC;
        }

        /* https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf */
    int maxtexsize = 4096;
    #if defined(__MACOSX__) || TARGET_OS_MACCATALYST
        maxtexsize = 16384;
    #elif defined(__TVOS__)
        maxtexsize = 8192;
    #ifdef __TVOS_11_0
        if (@available(tvOS 11.0, *)) {
            if ([mtldevice supportsFeatureSet:MTLFeatureSet_tvOS_GPUFamily2_v1]) {
                maxtexsize = 16384;
            }
        }
    #endif
    #else
    #ifdef __IPHONE_11_0
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wunguarded-availability-new"
        if ([mtldevice supportsFeatureSet:MTLFeatureSet_iOS_GPUFamily4_v1]) {
            maxtexsize = 16384;
        } else
    #pragma clang diagnostic pop
    #endif
    #ifdef __IPHONE_10_0
        if ([mtldevice supportsFeatureSet:MTLFeatureSet_iOS_GPUFamily3_v1]) {
            maxtexsize = 16384;
        } else
    #endif
        if ([mtldevice supportsFeatureSet:MTLFeatureSet_iOS_GPUFamily2_v2] || [mtldevice supportsFeatureSet:MTLFeatureSet_iOS_GPUFamily1_v2]) {
            maxtexsize = 8192;
        }
        else {
            maxtexsize = 4096;
        }
    #endif

        renderer->info.max_texture_width = maxtexsize;
        renderer->info.max_texture_height = maxtexsize;

    #if !__has_feature(objc_arc)
        [mtlcmdqueue release];
        [mtllibrary release];
        [samplerdesc release];
        [mtlsamplernearest release];
        [mtlsamplerlinear release];
        [mtlbufconstants release];
        [mtlbufquadindices release];
        [data release];
        [mtldevice release];
    #endif
    }
}
void     METAL_Dispose() {

}
Texture* METAL_CreateTexture(Uint32 format, Uint32 access, Uint32 width, Uint32 height) {

}
int      METAL_LockTexture(Texture* texture, void** pixels, int* pitch) {

}
int      METAL_UpdateTexture(Texture* texture, SDL_Rect* r, void* pixels, int pitch) {

}
void     METAL_UnlockTexture(Texture* texture) {

}
void     METAL_DisposeTexture(Texture* texture) {

}
void     METAL_SetRenderTarget(Texture* texture) {

}
void     METAL_UpdateWindowSize(int width, int height) {

}
void     METAL_UpdateViewport() {

}
void     METAL_UpdateClipRect() {

}
void     METAL_UpdateOrtho(float left, float top, float right, float bottom) {

}
void     METAL_UpdatePerspective(float fovy, float aspect, float nearv, float farv) {

}
void     METAL_UpdateProjectionMatrix() {

}
void     METAL_Clear() {

}
void     METAL_Present() {

}
void     METAL_SetBlendColor(float r, float g, float b, float a) {

}
void     METAL_SetBlendMode(int srcC, int dstC, int srcA, int dstA) {

}
void     METAL_StrokeLine(float x1, float y1, float x2, float y2) {

}
void     METAL_StrokeCircle(float x, float y, float rad) {

}
void     METAL_StrokeEllipse(float x, float y, float w, float h) {

}
void     METAL_StrokeRectangle(float x, float y, float w, float h) {

}
void     METAL_FillCircle(float x, float y, float rad) {

}
void     METAL_FillEllipse(float x, float y, float w, float h) {

}
void     METAL_FillTriangle(float x1, float y1, float x2, float y2, float x3, float y3) {

}
void     METAL_FillRectangle(float x, float y, float w, float h) {

}
void     METAL_DrawTexture(Texture* texture, float sx, float sy, float sw, float sh, float x, float y, float w, float h) {

}
