#if INTERFACE
#include <Engine/Includes/Standard.h>

class Math {
public:
    static int CosValues[256];
    static int SinValues[256];
    static int AtanValues[258];

    static double CosDoubleValues[256];
    static double SinDoubleValues[256];

    static char Str[258];
};
#endif

#include <Engine/Math/Math.h>

int    Math::CosValues[256];
int    Math::SinValues[256];
int    Math::AtanValues[258];
double Math::CosDoubleValues[256];
double Math::SinDoubleValues[256];
char   Math::Str[258];

PUBLIC STATIC void Math::Init() {
    for (int i = 0; i < 256; i++) {
        CosValues[i] = (int)(cos(i * M_PI / 128.0) * 0x10000);
        SinValues[i] = (int)(-sin(i * M_PI / 128.0) * 0x10000);
        CosDoubleValues[i] = (double)cos(i * M_PI / 128.0);
        SinDoubleValues[i] = (double)-sin(i * M_PI / 128.0);
        AtanValues[i] = (int)(atan2(i * 1.0, 256.0) * 0x80 / M_PI + 0x100) & 0xFF;
    }
    for (int i = 256; i < 258; i++) {
        AtanValues[i] = (int)(atan2(i * 1.0, 256.0) * 0x80 / M_PI + 0x100) & 0xFF;
    }
}

// Trig functions
PUBLIC STATIC int Math::Cos(int n) {
    return CosValues[n & 0xFF];
}
PUBLIC STATIC int Math::Sin(int n) {
    return SinValues[n & 0xFF];
}
PUBLIC STATIC int Math::Atan(int x, int y) {
    if (x == 0 && y == 0) return 0x0;

    y = -y;

    int val;
    int ax = Math::Abs(x);
    int ay = Math::Abs(y);

    if (ay < ax) {
        ay = (ay << 8) / ax;
        val = AtanValues[ay & 0xFF];
    }
    else if (ay > ax) {
        ax = (ax << 8) / ay;
        val = 0x40 - AtanValues[ax & 0xFF];
    }
    else {
        val = 0x20;
    }

    if (x < 0)
        val = -val + 0x80;
    if (y < 0)
        val = -val + 0x100;

    return val & 0xFF;
}
PUBLIC STATIC int Math::Distance(int x1, int y1, int x2, int y2) {
    x2 -= x1; x2 *= x2;
    y2 -= y1; y2 *= y2;
    return (int)sqrt(x2 + y2);
}
PUBLIC STATIC double Math::CosDouble(int n) {
    return CosDoubleValues[n & 0xFF];
}
PUBLIC STATIC double Math::SinDouble(int n) {
    return SinDoubleValues[n & 0xFF];
}
// Deterministic functions
PUBLIC STATIC int Math::Abs(int n) {
    return n < 0 ? -n : n;
}
PUBLIC STATIC int Math::Max(int a, int b) {
    return a > b ? a : b;
}
PUBLIC STATIC int Math::Min(int a, int b) {
    return a < b ? a : b;
}
PUBLIC STATIC int Math::Clamp(int v, int a, int b) {
    return Math::Max(a, Math::Min(v, b));
}
PUBLIC STATIC int Math::Sign(int a) {
    return -(a < 0);
}

// Random functions (inclusive)
PUBLIC STATIC int Math::Random() {
    return rand() & 0xFFFFFFFF;
}
PUBLIC STATIC int Math::RandomMax(int max) {
    return rand() % (max + 1);
}
PUBLIC STATIC int Math::RandomRange(int min, int max) {
    return (rand() % (max - min + 1)) + min;
}

PUBLIC STATIC char* Math::ToString(int a) {
    sprintf(Math::Str, "%d", a);
    return Math::Str;
}
